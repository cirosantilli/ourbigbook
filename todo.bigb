= TODO
{scope}

== Tag

=== Web

==== Comment

==== Develop without Internet

==== Editor

==== Dynamic tree fetch

=== CLI

=== Lib

=== Bug

=== Scope

=== ToC

== Issues

=== First on-hover heder self link after table of content activates table of contents instead of header 
{tag=Web}

E.g.: https://cirosantilli.com/physics#how-to-teach-and-learn-physics

Broken ToC HTML render?

=== Add an option to add a prefix to every ID of rendered output to avoid conflicts across comments and issue
{tag=Comment}
{tag=Web}

https://github.com/cirosantilli/ourbigbook/issues/251

Will be useful for comments on web, since a single author can make multiple comments, so prefixing by usernme won't be enough.

For topic pages, we can just prefix by username, and that is already currently done.

=== Comment h1 has empty metadata line where likes would be placed
{tag=Comment}
{tag=Web}

Likes will not go under header which does not need to be present, so gonna remove it.

=== Comment autogenerated IDs are wrong when there is header in the comment
{tag=Comment}
{tag=Web}

=== Allow showing article body on article lists
{tag=Web}

Maybe some will be list by default, but some will definitely be article show by default. Notably topic has to show the rendered body by default.

This is a superset of: https://github.com/cirosantilli/ourbigbook/issues/270

=== Separate lines with field label for parent and previous sibling on web editor
{tag=Web}
{tag=Editor}

Otherwise too confusing what is what when fields are pre-filled, e.g. when editing existing, and in the future when clicking a "add here" button.

=== Statically render links to issues and topic under each header for better SEO
{tag=Web}

The links don't show without JavaScript. The counts can be dynamic loaded, but the links we really want to do at compile time... any way?

=== Add sibling/add child buttons next to self headers and toc
{tag=Web}

=== Allow creating new pages under scope on web
{tag=Scope}
{tag=Web}

We likely just have to set the `path:` API argument based on the has scope status of the parent article.

As of the commit that adds this line, it should likely be possible to do it on the backend. On the frontend however we convert `/` to `-` so it doesn't work on the existence checks. We need a more accurate ID conversion there.

=== Remove all unnecessary newlines from HTML output
{tag=Lib}

These newlines were added for debugging purpoes, but debugging should just be done with:
``
npx js-beautify min.html
``

Newlines just add complexity to our codebase, and are not even getting removed from final output as things stand to take up a little bit of useless space.

=== Render ancestors, incoming links and tagged on web
{tag=Web}

All dynamic.

=== First on-hover heder self link after table of content activates table of contents instead of header 
{tag=Web}

=== ToC link on headers not opening collapsed toc entries
{c}
{tag=Bug}

=== parentId dropdown autocomplete
{tag=Web}

=== Remove scope from toc entry IDs
{tag=Scope}
{tag=CLI}

Happens on CLI and Web, though the web one is a bit artificial.

E.g. https://cirosantilli.com/x86-paging#toc-x86-paging/sample-code should instead be just: https://cirosantilli.com/x86-paging#toc-sample-code[]. Links from headers to currently work however, 

On web will require extra caution after we decided to initially stop culling scopes: <missing header metadata such as like button, same topic and issue link on headers under a scope>.

=== LIKE metadata on JOIN on

* web descendants
* all article lists

=== View article source
{tag=Web}

Can start simple with either raw or contained, and then add both some day. GitHub copy.

=== Load more articles
{tag=Dynamic tree fetch}
{tag=Web}

Either with scroll or a load more button. Slightly tempted by a load more button?

To implement, we just have to expose the ArticlePage.ts fetch in an API manner. The page then tracks current limit on a state variable, and just requests more from that point onwards.

=== Word count on web
{tag=Web}

Likely also at same time do a source character count.

Likely would be easy to implement as it would reuse the exact same query that we already use to update ncestors of the nested set index.

Was removed at: <remove word count on web> because would require actually implementing properly but lazy.

We should likely not show it on link hover however, only headers, as doing so would mean having to update every single page that links to a header for correctness. If this is ever done, it should be Js runtime stuff only.

=== Monaco editor requires web
{tag=Develop without Internet}
{tag=Editor}
{tag=Web}

It seems that the third party library we are using is just a hack and doesn't properly provide the thing offline... OMG could it be so crap? https://stackoverflow.com/questions/59773190/monaco-editor-with-nextjs/68611592#68611592

== Closed issues

=== h2 on hover self links are empty on Web
{tag=Web}

And therefore lead users to the toplevel page instead of a link to current header.

The links by clicking on the header itself are correct and go to a dedicated page with it on top. The problem is just for the on-hover links on the margin which we'd like to link to self in the current page.

=== Test scope 2 appears after Test scope 1 on generated data
{tag=Web}

OK, everything was reversed, I just hadn't noticed before because there was no numbered test data :-)

=== Prefix unnumbered IDs with the parent header's ID
{tag=Dynamic tree fetch}
{tag=Web}

=== Remove @ from toc IDs
{tag=Web}

E.g. currently have: http://localhost:3000/barack-obama#toc-@barack-obama/mitochondrion It works, but is ugly.

=== Missing header metadata such as like button, same topic and issue link on headers under a scope
{tag=Scope}

=== Headers under scope don't have scope on ID leads to ID conflicts and a link misses on Web
{tag=Scope}
{tag=Web}

E.g. in:
``
= x86

== Sample code

== x86 paging
{scope}

=== Sample code
``

both `Sample code` headers have `id="sample-code"`, which would lead to ID conflicts on the same page.

Also, as a result, the toc link from `x86` intended to go to `x86-paging/sample-code` misses and opens on a separate page.

I don't know how to solve this besides always including scopes on every ID... This does however lead to ugly local IDs on individual pages which is a bit of a shame... oh cruel life.

We could also have two versions of every page, scoped and non scoped, but things likely go exponential when we start dealing with subscope.

This could mean that a lot of toplevel scope removal work will go to the trash! :-( But what can you do, it is the inevitable outcome of dynamic page fetch?

=== Tags show up twice under scopes
{tag=Web}
{tag=Scope}

= Each header tag shows up twice on web
{synonym}

Happens on CLI, though was first noticed, and most important, on Web due to the all present user prefix.

Was already fully present on the previous deployment but we just completely missed it, e.g.: https://ourbigbook.com/cirosantilli/physics#physics-education-needs-more-focus-on-understanding-experiments-and-their-history

Minimal CLI example to reproduce:

subdir/asdf.bigb

``
= asdf
``

subdir/qwer.bigb

``
= qwer
{tag=asdf}
``

Then in the rendering of `subdir/qwer.html`, the tag `asdf` appears twice.

The root cause is that scope resolution is finding the same thing twice, one as `subdir/asdf` and then once again with just `asdf` (which is then correctly resolved).

=== Skip absolute link exit check on web
{tag=Web}

Maybe: https://stackoverflow.com/questions/10687099/how-to-test-if-a-url-string-is-absolute-or-relative

=== Prop dangerouslySetInnerHtml did not match on some pages
{tag=Web}

Happens on some pages but not others, e.g. `barack-obama/ciro-santilli`.

OK: that simply happens due to invalid HTML constructs:
* https://stackoverflow.com/questions/58266356/what-is-happening-such-i-receive-dangerouslysetinnerhtml-warning-and-empty-conte
* https://flaviocopes.com/react-fix-dangerouslysetinnerhtml-did-not-match/
and we had invalid or implicitly self closing HTML at: <self links broken on ciro-santilli starting at Budget transparency>.

=== Self links broken on /ciro-santilli starting at Budget transparency

There is some kind of fundamentally wrong HTML content being rendered, not Web specific: https://cirosantilli.com/sponsor#budget-transparency

Resolution: was due to missing a close tag that appeared when we used `\Quote` with `title`. It was even valid HTML OMG, but wront semantic. What a stack.

=== Don't move to a separate page when clicking link to image to another header that is already visible on current page on web
{tag=Web}

=== Don't move to a separate page when clicking toc links in a page that has scope on web
{tag=Scope}
{tag=Web}

=== Wiki link on same line as parent link on web h1
{tag=Web}

Likely locally too then right. Will also be more uniform with h2 which now has parent link.

Also seems like empty line (no wiki) is showing: http://localhost:3000/barack-obama/x86-paging/sample-code

=== h1 arguments broken on web
{tag=Bug}
{tag=Web}

Both preview and render.

OK, was not the arguments in general, was `{wiki}` alone with which I was testing, thank God!

=== Capture link clicks to headers in current page and don't change page
{tag=Dynamic tree fetch}
{tag=Web}

=== Remove word count on web
{tag=Dynamic tree fetch}
{tag=Web}

It is broken, and lazy to fix now.

Can be fixed later at: <word count on web>.

=== Fix ToC links on web, missing scope
{tag=Scope}
{tag=Dynamic tree fetch}
{tag=Web}

Fixed at: aca09f9485bcbc6c8cd184d61871f02e8a602981
