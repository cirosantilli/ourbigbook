= TODO
{scope}

== Issues

=== Fragment redirects not working on web
{tag=Web}

E.g. https://ourbigbook.com/cirosantilli/mathematics#cirosantilli/physics should redirect to https://ourbigbook.com/cirosantilli/physics

Is working on static website: https://cirosantilli.com/mathematics#physics does redirect to https://cirosantilli.com/physics

=== Missing fragment redirect not working on web
{tag=Editor}
{tag=Web}

E.g. https://ourbigbook.com/barack-obama/mathematics#barack-obama/physics should redirect to https://ourbigbook.com/barack-obama/physics but it did not. Is working on the static website.

=== WYSIWYG
{tag=Editor}
{tag=Web}

=== Live error checking as ou type on editor if chosen previous sibling is not a child of the selected parent article
{tag=Editor}
{tag=Error checking}
{tag=Web}

Current failure behaviour if use submits anyways is: shows API error `previousSiblingId "@cirosantilli/physics" does not exist, is not a header or is not a child of parentId "@cirosantilli/test-article"` under title, and it only goes away if you edit title, which is confusing as it is not title related. Also, while title error is visible, the submit button is inactive so the user is left a bit stuck.

=== Article create and update slow on web
{tag=Performance}
{tag=Web}

https://ourbigbook.com/api/articles

For user cirosantilli, just pushed cirosantilli.github.io at aa60ccb934bf9646d548e6b761489d31aec1a341, which has almost 7k articles.

The PUT to https://ourbigbook.com/api/articles is taking about 4+s on ourbigbook.com "Waiting for server response".

Locally on sqlite is only 800 ms. TODO test locally on psql.

This was after dynamic article tree, one suspicion is that it might be linked to maintaining the nested set state on a large set of articles. I really hope that's not it, as it would be hard to fix.

=== Render ancestors, incoming links and tagged on web
{tag=Web}

All dynamic.

=== `(beta)` on navbar gets pushed down half way at a specific page width just above mobile shift
{tag=Web}
{tag=CSS}

Just keep making viewport smaller an smaller, until it happen. Sample width that reproduces: 680px.

Removing `white-space: pre-wrap` solves it. But then the space between `(beta)` and `OurBigBook.com` gets removed.

=== Reach the same performance as static website with dynamic tree
{tag=Performance}
{tag=Web}

The move to dynamic tree slowed things down a lot for large pages such as: https://ourbigbook.com/cirosantilli[], making it is just unacceptably slow, and actually blocks any other page loads as the server does work.

These were at cirosantilli.github.io at aa60ccb934bf9646d548e6b761489d31aec1a341, which has almost 7k articles.

Some benchmarks on Chromium:
* `ping cirosantilli.com`: 17 ms
* https://cirosantilli.com `GET /`: 1.3s. Waiting for server: ping time only, the rest is content download. `content-length` from response: 300 kB zipped.
* https://ourbigbook/cirosantilli `GET /`:
  * Waiting for server response: 3.5s to 4s. That's our problem!
  * Contend download: 2.5s
* http://localhost:3000/cirosantilli `npm run dev` `GET /`:
  * Waiting for server response: between 2 and 3s. So we reproduce relatively well locally.

    curl `time_starttransfer` after a few stabilizing runs: 2.6s
  * Contend download: 1.6s

If we comment the single line in Article.tsx:
``
//html += render_toc_from_entry_list({ entry_list })
``
TTFB falls from 2.6s to 0.77s.

Removing the `renderRefCallback` drops it to between 2.2 and 2.4.

Limiting the ToC to 1k articles on server side leads to 0.5s. Maybe that's the first workaround we have to do until something else is understood. It is a shame that we have to go so much lower than the static website.

Maybe we can use some of the techniques from: https://reactjs.org/docs/optimizing-performance.html#virtualize-long-lists[] to improve things.

=== Include should work transparently with README in subdirectory
{tag=Include}
{tag=Web}

We should be able to write:

animal.bigb
``
= Animal

\Include[dog]
``

dog/README.bigb
``
= Dog
``

since the dog.bigb file should ideally be fully equivalent to

dog.bigb
``
= Dog
{scope}
``

=== Remove the path parameter from the article creation API
{tag=Web}

We likely want to get rid of the `path` parameter, and instead determine IDs fully from more "in-band" things like `{id}` and `{scope}`.

Both `{scope}` for subdirs and `{id}` for custom id basename !== from title should already be working, we just haven't setup ourbigbook CLI to inject `{id}` based on file path I think.

`{scope}` is however not really usable in general on the same source tree of cirosantilli.github.io due to https://github.com/cirosantilli/ourbigbook/issues/284[].

This would forbit some constructs that are currently possible locally, e.g. scopes that are not children such as:

parent.bigb
``
= Parent

== Child
{scope}

=== Child 2
{scope}
``

parent2.bigb
``
= Parent

\Include[child/subdir]
``

child/subdir.bigb
``
= Subdir
``

but that is fine, it is saner if we enforce scopes to match the tree article tree hierarchy.

=== Prevent full page reload on links using our existing link capture
{tag=Web}

Would be a possibly good solution now to: https://github.com/cirosantilli/ourbigbook/issues/274 now that we already have link click capturing necessarily.

=== Inject React header metadata on each header separately
{tag=Web}

No more need for:
``
for (const h of elem.querySelectorAll('.h')) {
``
on `Article.tsx` now that we have separate headers, we can just inject it one by one.

Bibliography:

* https://stackoverflow.com/questions/44643424/how-to-parse-html-to-react-component
* https://stackoverflow.com/questions/36104302/how-do-i-convert-a-string-to-jsx
* https://stackoverflow.com/questions/71224517/is-it-possible-to-inject-a-next-js-component-into-an-existing-application-html

=== Statically render links to issues and topic under each header for better SEO
{tag=Web}

The links don't show without JavaScript, this can be seen by disabling Js.

The counts can be dynamic loaded, but the links we really want to do at compile time... any way?

=== Add sibling/add child buttons next to toc entries of articles owned by the current user
{tag=Web}

=== Add sibling/add child buttons next to self headers and toc
{tag=Web}

=== Allow creating new pages under scope on web
{tag=Scope}
{tag=Web}

We likely just have to set the `path:` API argument based on the has scope status of the parent article.

As of the commit that adds this line, it should likely be possible to do it on the backend. On the frontend however we convert `/` to `-` so it doesn't work on the existence checks. We need a more accurate ID conversion there.

== Make rendered issue and comment fragments as short as possible
{tag=Comment}
{tag=Web}

For now I made them almost fully correct AFAIS:
* no ID conflicts that would show on the same page, e.g. across issue IDs and comment IDs
* links seem to go to where we want them to

The only known bug is: <cannot link from comment to article>

However, in order to achieve this easily we used scopes liberally, and so the fragments are horrendously long.

The ideal fragment setup for both comments and issues would be either:
* we don't ever want to show multiple comments/issues from different issues on same page
  * issue IDs:
    * regular elements `my-header`
    * ToC IDs
      * the ToC: `_toc`
      * the links: `_toc/my-header`
  * comment IDs:
    * regular elements `_comment/1/my-header`
    * ToC IDs
      * the ToC: `_comment/1/_toc`
      * the links: `_comment/1/_toc/my-header`
* we want to show multiple comments/issues from different issues on same page:
  * issue IDs:
    * regular elements `_issue/barack-obama/article-topic/1/my-header`
    * ToC IDs
      * the ToC: `_issue/barack-obama/article-topic/1/_toc`
      * the links: `_issue/barack-obama/article-topic/1/_toc/my-header`
  * comment IDs:
    * regular elements `_comment/barack-obama/article-topic/<issue-id>/<comment-id>/my-header`
    * ToC IDs
      * the ToC: `_comment/barack-obama/article-topic/<issue-id>/<comment-id>/_toc`
      * the links: `_comment/barack-obama/article-topic/<issue-id>/<comment-id>/_toc/my-header`

== Cannot link from comment to article
{tag=Comment}
{tag=Web}

https://github.com/cirosantilli/ourbigbook/issues/277

As of now, does work with a leading slash: `</test data>`.

Also: it does work if there is a header in the comment before the link.

=== Clicking on the comment header does not highlight the header line
{tag=Comment}
{tag=Web}

By that we mean the hardcoded `#n` area with the metadata, not an h1.

However if you refresh the page, it highlights! Mystery.

=== Comment h1 self link is empty and thus refreshes the page
{tag=Comment}
{tag=Web}

=== Remove all unnecessary newlines from HTML output
{tag=Lib}

These newlines were added for debugging purpoes, but debugging should just be done with:
``
npx js-beautify min.html
``

Newlines just add complexity to our codebase, and are not even getting removed from final output as things stand to take up a little bit of useless space.

=== ToC link on headers not opening collapsed toc entries
{c}
{tag=Bug}

=== parentId dropdown autocomplete
{tag=Web}

=== Remove scope from toc entry IDs
{tag=Scope}
{tag=CLI}

Happens on CLI and Web, though the web one is a bit artificial.

E.g. https://cirosantilli.com/x86-paging#toc-x86-paging/sample-code should instead be just: https://cirosantilli.com/x86-paging#toc-sample-code[]. Links from headers to currently work however, 

On web will require extra caution after we decided to initially stop culling scopes: <missing header metadata such as like button, same topic and issue link on headers under a scope>.

=== LIKE metadata on JOIN on

* web descendants
* all article lists

=== View article source
{tag=Web}

Can start simple with either raw or contained, and then add both some day. GitHub copy.

=== Load more articles
{tag=Dynamic tree fetch}
{tag=Web}

Either with scroll or a load more button. Slightly tempted by a load more button?

To implement, we just have to expose the ArticlePage.ts fetch in an API manner. The page then tracks current limit on a state variable, and just requests more from that point onwards.

Starting from the commit of this line, we are also going to limit the ToC, so a load more button on ToC would also be of interest: <load more ToC entrie>.

=== Load more ToC entrie
{tag=Dynamic tree fetch}
{tag=Web}

=== Word count on web
{tag=Web}

Likely also at same time do a source character count.

Likely would be easy to implement as it would reuse the exact same query that we already use to update ncestors of the nested set index.

Was removed at: <remove word count on web> because would require actually implementing properly but lazy.

We should likely not show it on link hover however, only headers, as doing so would mean having to update every single page that links to a header for correctness. If this is ever done, it should be Js runtime stuff only.

=== Monaco editor requires web
{tag=Offline development}
{tag=Editor}
{tag=Web}

It seems that the third party library we are using is just a hack and doesn't properly provide the thing offline... OMG could it be so crap? https://stackoverflow.com/questions/59773190/monaco-editor-with-nextjs/68611592#68611592

=== Respect ourbigbook.json `htmlXExtension` on ourbigbook.json redirects

Would require either moving `htmlXExtension` vs `--no-html-x-extension` processing out of `index.js`, or more ideally moving the redirection generation into index.js.

But aint't nobody got time for that!

== Closed issues

=== Empty Latest Followed shows as There are no articles on this website yet
{tag=Web}

=== Add sibling/add child buttons next to headers owned by the current user
{tag=Web}

=== Infinite navbar profile image refresh loop when there is no Internet
{tag=Offline development}

This might be something to do with us trying to have a dummy fallbak image when the image URL does not exist.

The request is:
``
GET https://static.productionready.io/images/smiley-cyrus.jpg net::ERR_INTERNET_DISCONNECTED
``
so it appears to be trying to infinitely fetch the default image.

For now we seem to have managed to stop it from going infinite by selecting an image that is stored locally in the website.

=== Separate lines with field label for parent and previous sibling on web editor
{tag=Web}
{tag=Editor}

Otherwise too confusing what is what when fields are pre-filled, e.g. when editing existing, and in the future when clicking a "add here" button.

=== Allow showing article body on article lists
{tag=Web}

Maybe some will be list by default, but some will definitely be article show by default. Notably topic has to show the rendered body by default.

This is a superset of: https://github.com/cirosantilli/ourbigbook/issues/270

=== Comment h1 has empty metadata line where likes would be placed
{tag=Comment}
{tag=Web}

Likes will not go under header which does not need to be present, so gonna remove it.

=== Comment autogenerated IDs are wrong when there is header in the comment
{tag=Comment}
{tag=Web}

=== Add an option to add a prefix to every ID of rendered output to avoid conflicts across comments and issue
{tag=Comment}
{tag=Web}

https://github.com/cirosantilli/ourbigbook/issues/251

We noticed this is hard to implement, because we want internal links to still work, and just adding a prefix to every ID does not take that into account.

We later noticed that what we actually want to solve the comment use case, is a custom toplevel scope, which we can easily implement with a custom named directory. So... scopes save the day for once?

Will be useful for comments on web, since a single author can make multiple comments, so prefixing by usernme won't be enough.

For topic pages, we can just prefix by username, and that is already currently done.

=== First on-hover heder self link after table of content activates table of contents instead of header 
{tag=Web}

E.g.: https://cirosantilli.com/physics#how-to-teach-and-learn-physics

Broken ToC HTML render?

OK, understood the root cause: we moved to rendering the ToC from inside the H rendering function itself, and as a result there is a single toplevel_child_modifier which acts on that entire output.

We'll need to create something more custom to properly handle this case.

=== h2 on hover self links are empty on Web
{tag=Web}

And therefore lead users to the toplevel page instead of a link to current header.

The links by clicking on the header itself are correct and go to a dedicated page with it on top. The problem is just for the on-hover links on the margin which we'd like to link to self in the current page.

=== Test scope 2 appears after Test scope 1 on generated data
{tag=Web}

OK, everything was reversed, I just hadn't noticed before because there was no numbered test data :-)

=== Prefix unnumbered IDs with the parent header's ID
{tag=Dynamic tree fetch}
{tag=Web}

=== Remove @ from toc IDs
{tag=Web}

E.g. currently have: http://localhost:3000/barack-obama#toc-@barack-obama/mitochondrion It works, but is ugly.

=== Missing header metadata such as like button, same topic and issue link on headers under a scope
{tag=Scope}

=== Headers under scope don't have scope on ID leads to ID conflicts and a link misses on Web
{tag=Scope}
{tag=Web}

E.g. in:
``
= x86

== Sample code

== x86 paging
{scope}

=== Sample code
``

both `Sample code` headers have `id="sample-code"`, which would lead to ID conflicts on the same page.

Also, as a result, the toc link from `x86` intended to go to `x86-paging/sample-code` misses and opens on a separate page.

I don't know how to solve this besides always including scopes on every ID... This does however lead to ugly local IDs on individual pages which is a bit of a shame... oh cruel life.

We could also have two versions of every page, scoped and non scoped, but things likely go exponential when we start dealing with subscope.

This could mean that a lot of toplevel scope removal work will go to the trash! :-( But what can you do, it is the inevitable outcome of dynamic page fetch?

=== Tags show up twice under scopes
{tag=Web}
{tag=Scope}

= Each header tag shows up twice on web
{synonym}

Happens on CLI, though was first noticed, and most important, on Web due to the all present user prefix.

Was already fully present on the previous deployment but we just completely missed it, e.g.: https://ourbigbook.com/cirosantilli/physics#physics-education-needs-more-focus-on-understanding-experiments-and-their-history

Minimal CLI example to reproduce:

subdir/asdf.bigb

``
= asdf
``

subdir/qwer.bigb

``
= qwer
{tag=asdf}
``

Then in the rendering of `subdir/qwer.html`, the tag `asdf` appears twice.

The root cause is that scope resolution is finding the same thing twice, one as `subdir/asdf` and then once again with just `asdf` (which is then correctly resolved).

=== Skip absolute link exit check on web
{tag=Web}

Maybe: https://stackoverflow.com/questions/10687099/how-to-test-if-a-url-string-is-absolute-or-relative

=== Prop dangerouslySetInnerHtml did not match on some pages
{tag=Web}

Happens on some pages but not others, e.g. `barack-obama/ciro-santilli`.

OK: that simply happens due to invalid HTML constructs:
* https://stackoverflow.com/questions/58266356/what-is-happening-such-i-receive-dangerouslysetinnerhtml-warning-and-empty-conte
* https://flaviocopes.com/react-fix-dangerouslysetinnerhtml-did-not-match/
and we had invalid or implicitly self closing HTML at: <self links broken on ciro-santilli starting at Budget transparency>.

=== Self links broken on /ciro-santilli starting at Budget transparency

There is some kind of fundamentally wrong HTML content being rendered, not Web specific: https://cirosantilli.com/sponsor#budget-transparency

Resolution: was due to missing a close tag that appeared when we used `\Quote` with `title`. It was even valid HTML OMG, but wront semantic. What a stack.

=== Don't move to a separate page when clicking link to image to another header that is already visible on current page on web
{tag=Web}

=== Don't move to a separate page when clicking toc links in a page that has scope on web
{tag=Scope}
{tag=Web}

=== Wiki link on same line as parent link on web h1
{tag=Web}

Likely locally too then right. Will also be more uniform with h2 which now has parent link.

Also seems like empty line (no wiki) is showing: http://localhost:3000/barack-obama/x86-paging/sample-code

=== h1 arguments broken on web
{tag=Bug}
{tag=Web}

Both preview and render.

OK, was not the arguments in general, was `{wiki}` alone with which I was testing, thank God!

=== Capture link clicks to headers in current page and don't change page
{tag=Dynamic tree fetch}
{tag=Web}

=== Remove word count on web
{tag=Dynamic tree fetch}
{tag=Web}

It is broken, and lazy to fix now.

Can be fixed later at: <word count on web>.

=== Fix ToC links on web, missing scope
{tag=Scope}
{tag=Dynamic tree fetch}
{tag=Web}

Fixed at: aca09f9485bcbc6c8cd184d61871f02e8a602981

== Tag

=== CSS

=== Web

==== Comment

==== Dynamic tree fetch

==== Editor

==== Error checking

==== Include

==== Issue

==== Offline development

=== CLI

=== Lib

=== Bug

=== Scope

=== Performance

=== Refactor

=== ToC
