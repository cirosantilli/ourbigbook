\h[1][Cirodown]

A Markup language to write multipage or single page HTML / PDF books, blogs, etc. that is saner and more powerful than Markdown and Asciidoctor, but still nicer to write than XML and JSON, with reference implementation in JavaScript.

\toc

\h[2][Quick start]

TODO: browser live test.

Install NPM package and use it from the command line:

\C[[
npm install cirodown
printf 'ab\ncd\n' | cirodown --body-only
]]

Same with an API call in \a[api_hello.js]:

\C[[
npm install cirodown
./api_hello.js
]]

Run the latest master on README.ciro and view it:

\C[[
git clone https://github.com/cirosantilli/cirodown
cd cirodown
npm link
npm link cirodown
./cirodown README.ciro > REAME.html
xdg-open README.html
]]

The \c[npm link] commands allow you to make changes to the code without re-installing the package all the time for development! Try hacking \a[cirodown] to see it.

The symlink business can be undone with:

\C[[
npm unlink
rm node_modules/cirodown
]]

TODO: create a multifile blog example folder and link from here.

\h[2][Design goals]
{id_scope=true}

Cirodown is designed entirely to allow writing complex professional HTML and PDF scientific books, blogs, articles and encyclopedias.

Cirodown aims to be the ultimate LaTeX "killer", allowing books to be finally published as either HTML or PDF painlessly (LaTeX being only a backend to PDF generation), supporting out of the box feature such as:

\l[\x[internal-cross-references][references] to \x[headers][headers], \x[images][images], etc. with error checking: never break internal links gain]
\l[KaTeX server side \x[math][Mathematics]]
\l[multi file features out of the box so you don't need a separate wrapper like Jekyll to make a multi-page website:
  \l[\x[internal-cross-file-references]]
  \l[\x[table-of-contents][table of contents] that crosses input files]
  \l[\c[inotifywait] watch rebuild server]
  \l[cross file includes that work as links on multi output file mode, and true includes in single output file mode]
  \l[cross file configuration files to factor out common page parts like headers and footers]
]

It is meant to be both saner and more powerful than Markdown and Asciidoctor.

The tradeoff for those features is that the language is slightly heavier to read and write.

It is intended that this will be an acceptable downside as Cirodown will be used primarily large complex content such as books rather than forum posts, and will therefore primarily written either:

\l[in text editors locally, where users have more features than in random browser textareas]
\l[in a dedicated website that will revolutionize education, and therefore have a good JavaScript editing interface: \a[https://github.com/cirosantilli/write-free-science-books-to-get-famous-website]]

\h[3][Saner]

To be saner than both Markdown and Asciidoctor, Cirodown has exactly five magic characters, with similar functions as in LaTeX:

\l[\c[\\] backslash to start a macro, like LaTeX]
\l[\c[\{] and \c[\}]: left and right square brackets to delimit optional macro arguments]
\l[\c[\[] and \c[\]]: left and right curly braces bracket to start an optional arguments]

And double blank newlines for \x[paragraphs][paragraphs] if you are pedantic.

We would like to have only square brackets for both optional and mandatory to have even less magic characters, but that would make the language difficult to parse for computer and humans. LaTeX was right for once!

This produces a very regular syntax that is easy to learn, including doing:

\l[arbitrary nesting of elements]
\l[adding arbitrary properties to elements]

This sanity also makes the end tail learning curve of the endless edge cases found in Markdown and Asciidoctor disappear.

The language is designed to be philosophically isomorphic to HTML to:

\l[further reduce the learning curve]
\l[ensure that most of HTML constructs can be reached, including arbitrary nesting]

More precisely:

\l[macro names map to tag names, e.g.: \c[\\a] to \c[<a]]
\l[
  one of the arguments of macros, maps to the content of the HTML element, and the others map to attributes.

  E.g., in a link:

  \C[[\a[http://example.com][Link text\]]]

  the first macro argument:

  \C[http://example.com]

  maps to the \c[href] of \c[<a], and the second macro argument:

  \C[Link text]

  maps to the internal content of \c[<a>Link text<>]
]

\h[3][More powerful]

The \x[saner][high sanity of Cirodown], also makes creating new macro extensions extremely easy and intuitive.

All built-in language features use the exact same API as new extensions, which ensures that the extension API is sane forever.

Markdown is clearly missing many key features such as block attributes and \x[internal-cross-references], and has no standardized extension mechanism.

The "more powerful than Asciidoctor" part is only partially true, since Asciidoctor is very featureful can do basically anything through extensions.

The difference is mostly that Cirodown is completely and entirely focused on making amazing scientific books, and so will have key features for that application out-of-the box.

Another advantage over Asciidoctor is that the reference implementation of Cirodown is in JavaScript, and can therefore be used on browser live preview out of the box. Asciidoctor does Transpile to JS with \a[https://github.com/opal/opal][Opal], but who wants to deal with that layer of complexity?

\h[2][Paragraphs \c[[\p]]]
{id=paragraphs}

OK, this is too common, so we opted for some insanity here: double newline is a paragraph!

Paragraph 1.

Paragraph 2.

Equivalently however, you can use an explicit \c[[\p]] macros as well, which is required for example to add properties to a paragraph, e.g.:

\p{id=paragraph-1}[Paragraph 1]
\p{id=paragraph-2}[Paragraph 2]

Paragraphs are created automatically inside \x[macro-argument-syntax][macro argument] whenever a double newline appears.

Due to their insane syntax, paragraphs have to do some magic to determine where they start and end. TODO: mention the rule that paragraphs wrap only phrasing content, link to: \x[help-macros].

\h[2][Links \c[[\a]]]
{id=links}

Autolink (link text is the same as the link): \a[http://example.com].

Link with custom text: \a[http://example.com][my custom link text].

\a[http://example.com][Multiple

paragraphs]

\h[2][Internal cross references \c[[\x]]]
{id=internal-cross-references}

Every macro in Cirodown can have an optional \c[id] and a \c[title] property.

Those that have a \c[title] but no \c[id], get an auto-generated ID from the title: \x[automatic-id-from-title].

For macros that do have an ID, you can write a cross reference to it:

\C[[
\h[2][My title]{id=my-id}

Read this \x[my-id][amazing section].
]]

If the second argument, the \c[content], is not present, it expand to the header title, e.g.:

\C[[
\h[2][My title]{id=my-id}

Read this \x[my-id].
]]

is the same as:

\C[[
\h[2][My title]{id=my-id}

Read this \x[my-id][My title].
]]

\h[3][Cross reference style]

To also show the section auto-generated number as in "Section X.Y My title" we add the optional \c[[{style=full}]] \x[positional-vs-named-arguments][named parameter] to the cross reference, for example:

\C[[
\h[2][My title]{id=my-id}

Read this \x[my-id]{style=full}.
]]

\h[3][Internal cross file references]

Reference to the first header of another file: \x[not-readme]. That header gets its ID from the file name by default.

Reference to an internal header of another file: \x[not-readme/h2-in-not-the-readme]. By default, That header ID gets prefixed by the ID of the top header.

\h[3][Automatic ID from title]

If a macro has the \c[title] property is present but no explicit \c[id], an ID is created automatically from the \c[title], by applying the following transformations:

\l[convert all of \c[A-Z] characters to lowercase]
\l[convert consecutive sequences of all non \c[a-z0-9] ASCII characters to a single hyphen \c[-]. Note that this leaves non-ASCII character untouched.]
\l[strip leading or trailing hyphens]

Note how those rules leave non ASCII Unicode characters untouched, as capitalization and determining if something "is a letter or not" in those cases can be tricky.

So for example, the following automatic IDs would be generated: \x[table-examples-of-automatically-generated-ids].

\table{title=Examples of automatically generated IDs}
[
\tr[
  \th[title]
  \th[id]
  \th[comments]
]
\tr[
  \td[My favorite title]
  \td[my-favorite-title]
  \td
]
\tr[
  \td[Ciro's markdown is awesome]
  \td[ciro-s-markdown-is-awesome]
  \td
]
\tr[
  \td[The École Polytechnique]
  \td[the-École-polytechnique]
  \td[We leave the non ASCII uppercase \a[https://en.wikipedia.org/wiki/Acute_accent][acute accented] \c[e], \c[É], untouched by default]
]
]

\h[2][Headers \c[[\h]]]
{id=headers}

\h[3][Unlimited header levels]

There is no limit to how many levels we can have!

HTML is randomly limited to \c[h6], so Cirodown just renders higher levels as an \c[h6] with a \c[data-level] attribute to indicate the actual level for possible CSS styling:

\C[[
<h6 data-level="7">My title</h6>
]]

\h[4][My h4]

\h[5][My h5]

\h[6][My h6]

\h[7][My h7]

\h[8][My h8]

\h[9][My h9]

\h[10][My h10]

\h[11][My h11]

\h[12][My h12]

\h[13][My h12]

\h[3][Table of contents \c[[\toc]]]
{id=table-of-contents}

We can add table of contents anywhere in the document, e.g. here is another one:

\toc

\h[4][id_scope]

TODO implement.

If this header attribute is \c[true], then the ID of all children are prefixed with the ID of this header + a slash \c[/].

This property is true by default for cross file references, although it can be turned off explicitly with \c[id-scope=false].

References withing a single scope do not need the parent scope prefix.

\h[3][Header explicit levels vs nesting design choice]

Arguably, the language would be even saner if we did:

\C[[
\h[My h1][

Paragraph.

\h[My h2][]
]
]]

rather than having explicit levels.

But we chose not to do it like most markups available because it leads to too many nestiing levels, and hard to determine where you are without tooling.

\h[3][Includes \c[[\include]]]
{id=includes}

The \c[[\include]] macro achieves the following goals:

\l[
  show a single header at multiple locations in the table of contents. This makes the TOC into a full blown graph rather than a tree.

  This can be used to implement a tag entirely within the ToC!
]
\l[
  determine where external files will be placed in \c[--single-page] mode.

  When compiling to HTML, we can choose to either:

  \l[compile as multiple pages: default, includes show on ToC and render as \x[internal-cross-references][internal cross references to headers]]
  \l[compile as a single page: selected with the \c[cirodown --single-page] option]
]

If an external header would be included multiple times in a single output page, the ToC contents are duplicated, but the content itself cannot be because that would lead to ID conflicts and large pages.

Therefore, in this case you are forced to specify which include will actually expand to the \c[canonical] attribute:

\C[[
\include[not-the-readme]{canonical=true}
]]

\h[2][Lists \c[[\l]]]
{id=lists}

With implicit container:

\l[a]
\l[b]
\l[c]

Equivalent with explicit container:

\ul[
\l[a]
\l[b]
\l[c]
]

The explicit container is required if you want to add properties to the list, e.g. a title and an ID: \x[list-my-id]:

\ul{title=My list title}
{id=list-my-id}
[
\l[a]
\l[b]
\l[c]
]

It is also required if you want ordered lists:

\ol[
\l[first]
\l[second]
\l[third]
]

Nested lists with implicit containers:

\l[
  a

  \l[a1]
  \l[a2]
  \l[a2]
]
\l[b]
\l[c]

List item with a paragraph inside of it:

\l[a]
\l[
  I have

  Multiple paragraphs.

  \l[And]
  \l[also]
  \l[a]
  \l[list]
]
\l[c]

\h[2][Images \c[[\image]]]
{id=images}

A block image with \x[macro-capitalization-for-block-vs-inline][capital] 'i' \c[Image] can be seen at \x[image-my-xi-chrysanthemum]:

\Image[https://raw.githubusercontent.com/cirosantilli/media/master/Chrysanthemum_Xi_Jinping_with_liusi_added_by_Ciro_Santilli.jpeg]
{title=Xi Chrysanthemum is a very nice image}
{id=image-my-xi-chrysanthemum}
{source=https://commons.wikimedia.org/wiki/File:Lotus_flower_(978659).jpg}
{description=
  We can have multiple paragraphs here, just for any other parameter argument.

  I'm not even kidding.
}

Here is one without a description but with an ID so we can link to it: \x[image-my-xi-chrysanthemum-2]{style=full}.

\Image[https://raw.githubusercontent.com/cirosantilli/media/master/Chrysanthemum_Xi_Jinping_with_liusi_added_by_Ciro_Santilli.jpeg]
{id=image-my-xi-chrysanthemum-2}

We must use \x[cross-reference-style][\c[style=full]] here because otherwise the link text would be empty and not show at all.

If the image has neither ID nor title, then it does not get a caption and it is not possible to link to it, and it does not take up an image number:

\Image[https://raw.githubusercontent.com/cirosantilli/media/master/Chrysanthemum_Xi_Jinping_with_liusi_added_by_Ciro_Santilli.jpeg]

This kind of image is discouraged, because in paged output formats like PDF, it could float away from the text that refers to the image.

And here is an \image[https://raw.githubusercontent.com/cirosantilli/media/master/Chrysanthemum_Xi_Jinping_with_liusi_added_by_Ciro_Santilli.jpeg][Xi Chrysanthemum] inline one with lower case 'i'. Inline images can't have captions.

\h[2][Code \c[[\c]] and \c[[\C]]]
{id=code}

Inline code blocks (code blocks that should appear in the middle of a paragraph) are done with lower case \c[c]:

\C[[
My \c[inline] code.
]]

renders to:

\C[[
<p>My <code>inline</code> code.</p>
]]

Code blocks (code blocks that should appear outside of paragraphs in their own lines) are done with capital \c[C]:

\C[[
A paragraph.

\C[
A block
of code
]

Another paragraph.
]]

renders to:

\C[[
<p>A paragraph.</p>
<pre><code>A block
of code</code></pre>
<p>Another paragraph.</p>
]]

If the content of the code block has many characters that you would need to \x[escape-characters][escape], you will often want to use \x[literal-arguments], which work just like the do for any other argument. For example:

\C[[[
A paragraph.

\C[[
And now, some long, long code, with lots
of chars that you would need to escape:
\ [  ] {  }
]]

A paragraph.
]]]

Note that the initial newline is skipped automatically in code blocks, just as for any other element, due to: \x[argument-leading-newline-removal], so you don't have to worry about it.

The capital vs lower case theme is also used in other elements, for example \x[math].

The distinction between inline \c[c] and block \c[C] code blocks is needed because in HTML, \a[https://stackoverflow.com/questions/5371787/can-i-have-a-pre-tag-inside-a-p-tag-in-tumblr/58603596#58603596][\c[pre] cannot go inside \c[p]].

We could have chosen to do some magic to differentiate between them, e.g. checking if the block is the only element in a paragraph, but we decided not to do that to keep the language saner.

\h[2][Mathematics \c[[\M]] and \c[[\m]]]
{id=math}

Via KaTeX server side, oh yes!

Just like code, but LaTeX math goes in.

My inline \m[[\sqrt{1 + 1}]] is awesome.

Escape the closing bracket with backslash: \m[1 - \[1 + 1\] = -1].

Escape the closing bracket with double open and close: \m[[1 - [1 + 1] = -1]] is awesome.

Display math is done with upper case \c[M]:

\M[[
\sqrt{1 + 1} \\
\sqrt{1 + 1}
]]

HTML escaping happens as you would expect, e.g. < shows fine in:

\M[[
1 < 2
]]

Equation IDs and titles and linking to equations works identically to \x[images][images], see that section for full details. Here is one equation reference example: \x[equation-my-first-equation].

\M{title=My first equation}[[
1 + 1 = 2
]]

\h[3][Math defines across blocks]

TODO pending upstream tag bump: \a[https://github.com/KaTeX/KaTeX/pull/2091] First block defining with \c[\\newcommand]:

\M[[
\newcommand{\foo}[0]{bar}
]]

Second block using:

\M[[
\foo
]]

First block defining with \c[\\def]:

\M[[
\gdef\foogdef{bar}
]]

Second block using:

\M[[
\foogdef
]]

\h[2][Tables \c[[\table]], \c[[\tr]], \c[[\th]] and \c[[\td]]]
{id=tables}

Similar to lists. Implicit container with optional indentation to improve readability:

\tr[
  \th[Header 1]
  \th[Header 2]
]
\tr[
  \td[1 1]
  \td[1 2]
]
\tr[
  \td[2 1]
  \td[2 2]
]

Explicit container to add further properties: \x[table-my-table].

\table{title=My table title}
{id=table-my-table}
[
\tr[
  \th[Header 1]
  \th[Header 2]
]
\tr[
  \td[1 1]
  \td[1 2]
]
\tr[
  \td[2 1]
  \td[2 2]
]
]

\h[2][Comments]

The \c[Comment] and \c[comment] macros are regular macros that does not produce any output. Capitalization is explained at: \x[macro-capitalization-for-block-vs-inline].

You will therefore mostly want to use it with a \x[literal-arguments][literal argument], which will, as for any other macro, ignore any macros inside of it.

\Comment[[
One line and \m[1 + 1]

\l[a]
\l[b]

Another line.
]]

And here is: \comment[[\m[1 + 1\]]] an inline one.

\comment[[\m[1 + 1\]]] inline at the start.

\h[2][Cirodown syntax]

\h[3][Macro argument syntax]

\h[4][Positional vs named arguments]

Every argument in Cirodown is either positional or named.

For example, in a \x[headers][header] definition with an ID:

\C[[
\h[1][My asdf]{id=asdf qwer}{id_scope=myscope}
]]

we have:

\l[two positional argument: \c[[[1]]] and \c[[[My asdf]]]. Those are surrounded by \c[[[]]] and have no name]
\l[
  two named arguments: \c[[{id=asdf qwer}]] and \c[[{id_scope=myscope}]].

  The first one has name \c[id] and the mandatory separator \c[=], followed by the value \c[asdf qwer].
]

You can determine if a macro is positional or named by using \x[help-macros]. Its output contains something like:

\C[[
  "h": {
    "name": "h",
    "positional_args": [
      {
        "name": "level"
      },
      {
        "name": "content"
      }
    ],
    "named_args": {
      "id": {
        "name": "id"
      }
      "id_scope": {
        "name": "id_scope"
      }
    },
]]

and so we see that \c[level] and \c[content] are positional arguments, and \c[id] and \c[id_scope] are named arguments.

Generally, positional arguments are few (otherwise it would be hard to know which is which is which), and are almost always used for a given element so tha they save us from typing the name too many times.

The order of positional arguments must of course be fixed, but named arguments can go anywhere. We can even mix positional and named arguments however we want, although this is not advised for clarity.

The following are therefore all equivalent:

\C[[
\h[1][My asdf]{id=asdf qwer}{id_scope=myscope}
\h[1][My asdf]{id_scope=myscope}{id=asdf qwer}
\h{id=asdf qwer}{id_scope=myscope}[1][My asdf]
\h{id_scope=myscope}[1]{id=asdf qwer}[My asdf]
]]

Just like named arguments, positional arguments are never mandatory.

If not given, most positional arguments will default to an empty string.

However, some positional arguments can have special effects if not given.

For example, an anchor with the first positional argument present (the URL), but not the second positional argument (the link text) as in:

\C[[
\a[http://example.com]
]]

has the special effect of generating automatic links as in:

\C[[
\a[http://example.com][http://example.com]
]]

See also: \x[links].

\h[4][JavaScript interface for arguments]

The JavaScript interface sees arguments as follows:

\C[
function macro_name(args)
]

where args is a dict such that:

\l[optional arguments have the key / value pairs explicitly given on the call]
\l[
  mandatory arguments have a key documented by the API, and the value on the call.

  For example, the link API names its arguments \c[href] and \c[text].
]

\h[4][Newlines between arguments]

The macro name and the first argument, and two consecutive arguments, can be optionally separated by exactly one newline character, e.g.:

\C[[
\h[2]
{id-scope=true}
[Design goals]
]]

is equivalent to:

\C[[
\h[2]{id-scope=true}[Design goals]
]]

and this non-recommended mixed style:

\C[[
\h[2]{id-scope=true}
[Design goals]
]]

This allows to greatly improve the readability of long argument lists by having them one per line.

\h[4][Escape characters]

For non-literal macro arguments, the rule is simple, you must escape all of:

\l[\c[\\]]
\l[\c[\[] and \c[\]]]
\l[\c[\{] and \c[\}]]

This is good for short arguments of regular text, but for longer blocks of \x[code] or \x[math], you may want to use \x[literal-arguments]

\h[4][Literal arguments]

Arguments that are opened with more than one square brackets \c[\[] or curly braces \c[\{] are literal arguments.

In literal arguments, Cirodown is not parsed, and the entire argument is considered as text until a corresponding close with the same number of characters.

Therefore, you cannot have nested content, but it makes it extremely convenient to write \x[code] or \x[math].

For example, a multiline code block with double open and double close square brackets inside can be enclosed in triple square brackets:

\C[[[
A literal argument looks like this in Cirodown:

\C[[
\C[
A multiline

cod block.
]
]]

And another paragraph.
]]]

The same works for inline code:

\C[[[
The program \c[[puts("]");]] is very complex.
]]]

Within literal blocks, only one thing can be escaped with backslashes: leading \c[\[] or trailing \c[\]].

The rule is that:

\l[if the first character of a literal argument is a sequence of \c[\\], and it is followed by another argument open character (e.g. \c[\[]), remove the first \c[\\] and treat the other characters as regular text]
\l[if the last character of a literal argument is a \c[\\], ignore it and treat the following closing character (e.g. \c[\]]) as regular text]

See the following open input / output:

\C[[[
\c[[\ b]]
<code>\ b</code>

\c[[\a b]]
<code>\a b</code>

\c[[\[ b]]
<code>[ b</code>

\c[[\\[ b]]
<code>\[ b</code>

\c[[\\\[ b]]
<code>\\[ b</code>
]]]

and close examples:

\C[[[[
\c[[a \]]
<code>a \</code>

\c[[a \]]]
<code>a ]</code>

\c[[a \\]]]
<code>a \]</code>
]]]]

\h[4][Argument leading newline removal]

If the very first character of an argument is a newline, then that character is ignored.

For example:

\C[[[
\C[[
a

b
]]
]]]

generates something like:

\C[
<pre><code>a

b
</code></pre>
]

instead of:

\C[
<pre><code>
a

b
</code></pre>
]

This is extremely convenient to improve the readability of code blocks and similar constructs.

If you absolutely need an opening newline, just add a second leading or trailing newline to the macro argument, e.g.:

\C[[[
\C[[

a

b

]]
]]]

\h[4][Argument automatic indentation removal]

Inside of a non-literal block, the very first non-whitespace character determines the indentation level of the content.

This allows seamlessly indenting complex nested content to make it more readable.

For example, a list with complex content could be written without indentation as:

\C[[[
\l[a]
\l[
b

\C[[
And now some code
]]

And a paragraph.
]
\l[c]
]]]

but it would be more readable as the equivalent:

\C[[[
\l[a]
\l[
  b

  \c[[
  And now some code
  ]]

  And a paragraph.
]
\l[c]
]]]

If a something tries to reduce the current indentation level, then that leads to an error:

\C[[
\l[a]
\l[
  b

I'm bad because I have negative indentation.

  Back to good.
]
\l[c]
]]

\h[3][Macro capitalization for block vs inline]

This is just a naming convention without any magic attached to it. It is currently used for macros such as:

\l[\x[math]]
\l[\x[code]]
\l[\x[comments]]

We haven't found a sane way of getting rid of that for now, so just for now just force users to explicitly select between them.

The distinction is required because there are lots of things you cannot put inside paragraphs in HTML.

\h[2][Tooling]

Unlike all languages which rely on ad-hoc tooling, we will support every single tool that is required and feasible to be in this repository in this repository, in a centralized manner.

\h[3][\c[--help-macros]]
{id=help-macros}

You can get an overview of all macros in JSON format with:

\C[[
./cirodown --help-macros
]]

\h[3][Multifile and server]

In addition to being a single input single output file conversion tool, our implementation will completely overtake the functions currently done by of Jekyll or other static website generators.

We believe that this is the only way to achieve a perfect unified development experience.

Firstly, the same executable that does single file conversion, when pointed to a directory enter a multi-file mode that does the desired multi-file conversion, resolving for example \x[internal-cross-file-references].

Furthermore, the exact same executable will have a server mode speed up interactive development with a off-the-shelf text editor (as opposed to a \x[editor-and-preview][the planned dedicated editor]).

\h[3][Server and dependency resolution]

TODO xref dep resolution, on demand rebuild

\h[3][Editor and preview]

We must achieve an editor setup with synchronized live side-by-side preview.

It would be amazing to have a WebKit interface that works both on browser for the and locally.

TODO

\h[3][Macro dump]

The compiler executable will have a \c[--dump-macros] option that will dump all macros, describing all of their arguments and including help strings registered by the macro definition API.

\h[2][Developing Cirodown]

\h[3][Test system]

Run all tests:

\C[[
npm test
]]

List all tests:

\C[[
node node_modules/mocha-list-tests/mocha-list-tests.js main.js
]]

As per: \a[https://stackoverflow.com/questions/41380137/list-all-mocha-tests-without-executing-them/58573986#58573986].

Run just one test by name:

\C[[
npm test -- 'one paragraph'
]]

As per: https://stackoverflow.com/questions/10832031/how-to-run-a-single-test-with-mocha TODO: what if the test name is a substring?

Step debug during a test run. Add the statement:

\C[[
debugger;
]]

to where you want to break in the code, and then:

\C[[
node inspect ./node_modules/.bin/mocha test --ignore-leaks "-g" "p with id before"
]]

\h[3][Overview of files in this repository]

\l[\a[index.js]: main code. Must be able to run in the browser, so no Node.js specifics. Exposes the central \c[convert] function]
\l[\a[cirodown]: CLI executable. Is basically just a CLI interface frontend to \c[convert]]
\l[\a[test.js]: contains all the Mocha tests, see also: \x[test-system]]
\l[\a[README.md]: minimal Markdown README until GitHub / NPM support Cirodown :-)]

\h[3][Internals API]

Tokenized token stream and AST can be obtained as JSON from the API.

Errors can be obtained as JSON from the API.

Everything that you need to write Cirodown tooling, is present in the main API.

All tooling will be merged into one single repo.

\h[3][The \c[[\toplevel]] implicit macro]
{id=toplevel}

Every Cirodown document is implicitly put inside a \c[[\toplevel]] document and:

\l[any optionally given arguments at the very beginning of the document will be treated as arguments of the \c[[\toplevel]] macro]
\l[anything else will be put inside the \c[content] argument of the \c[[\toplevel]] macro]

E.g., a Cirodown document that contains:

\C[[
[title=My favorite title]

And now, some content!
]]

is morally equivalent to:

\C[[
\toplevel
[title=My favorite title]
[
And now, some content!
]
]]

In terms of HTML, the \c[\\toplevel] element corresponds to the \c[<html>], \c[<head>], \c[<header>] and \c[<footer>] elements of a document.

\h[3][Formal grammar]

TODO. Describe Cirodown's formal grammar, and classify it in the grammar hierarchy and parsing complexity.

\h[3][TODO]

\l[toc]
\l[publis npm package]
\l[browser live quick test]
\l[publish webpage on cirosantilli.com]
\l[header nested numbers]
\l[list and code caption]
\l[image description and source]
\l[self links on tables and equations with on hover over caption]
\l[input indentation skip]
\l[correct ID generation algorithm to be Unicode robust]
\l[local downloads and single HTML page with image / script embeds]
\l[verify integer argument type e.g. on header level]
\l[verify x style in choices \c[short] or \c[full]]
\l[LaTeX output]

\h[2][Related projects]

\l[\a[https://github.com/rstudio/bookdown], \a[https://bookdown.org/]. Very similar feature set to what we want!!! Transpiles to markdown, and then goes through Pandoc: \a[https://bookdown.org/yihui/bookdown/pandoc.html], thus will never run on browser without huge translation layers. But does have an obscene ammount of output formats however.]
\l[\a[https://gohugo.io/][Hugo]. Pretty good, similar feature set to ours. But Go based, so hard on browser, and adds adhoc features on top of markdown once again]

Less related but of interest:

\l[\a[http://www.uprtcl.io/]]
\l[\a[https://libretexts.org]]
