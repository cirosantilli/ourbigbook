#!/usr/bin/env node


const fs = require('fs');
const util = require('util');

// https://stackoverflow.com/questions/44447847/enums-in-javascript-with-es6/49709701#49709701
const make_enum = function(arr) {
  let obj = {};
  for (let val of arr){
    obj[val] = Symbol(val);
  }
  return Object.freeze(obj);
}

const TokenType = make_enum([
  'PLAINTEXT',
  'MACRO_NAME',
  'MANDATORY_ARGUMENT_START',
  'MANDATORY_ARGUMENT_END',
  'OPTIONAL_ARGUMENT_START',
  'OPTIONAL_ARGUMENT_END',
]);

const Token = class {
  /**
   * @param {String} type
   * @param {String} value - Default: undefined
   * @param {number} start_line
   * @param {number} start_column
   */
  constructor(type, start_line, start_column, value) {
    this.type = type;
    this.start_line = start_line;
    this.start_column = start_column;
    this.value = value;
  }
}

const Argument = class {
  /**
   * @param {String} name
   * @param {Boolean} required - Default: false
   * @param {Boolean} literal - Default: false
   */
  constructor(options) {
    this.name = options.name;
    if ('required' in options) {
      this.requied = options.required;
    } else {
      this.requied = false;
    }
    if ('literal' in options) {
      this.literal = options.literal;
    } else {
      this.literal = false;
    }
  }
}

const Macro = class {
  /**
   * @param {Array[Argument]} args
   * @param {Function} convert
   */
  constructor(args, convert) {
    this.args = args;
    this.convert = convert;
    this.optional_args = {
      id: new Argument({
        name: 'id',
        required: false,
        literal: false,
      }),
    };
    this.required_args = [];
    let required_arg_names = new Set();
    for (const arg of args) {
      let name = arg.name
      if (required_arg_names.has(name) || name in this.optional_args) {
        throw new Error('name already taken: ' + name);
      }
      if (arg.required) {
        this.required_args.push(arg);
        required_arg_names.add(name);
      } else {
        this.optional_args[name] = arg;
      }
    }
  }
}

let macros = {
  p: new Macro(
    [
      new Argument({
        name: 'content',
        required: true,
        literal: false,
      }),
    ],
    function(args) {
      return `<p>${args.content.convert()}</p>`
    }
  ),
  a: new Macro(
    [
      new Argument({
        name: 'href',
        required: true,
        literal: true,
      }),
      new Argument({
        name: 'content',
        required: true,
        literal: false,
      }),
    ],
    function(args) {
      return `<a href="${args.href.convert()}">${args.content.convert()}</p>`
    }
  ),
  plaintext: new Macro(
    [
      new Argument({
        name: 'content',
        required: true,
        literal: true,
      }),
    ],
    function(arg) {
      return arg;
    }
  ),
  toplevel: new Macro(
    [
      new Argument({
        name: 'title',
        required: false,
        literal: false,
      }),
      new Argument({
        name: 'content',
        required: true,
        literal: false,
      }),
    ],
    function(args) {
      return `<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>${args.title.convert()}</title>
</head>
<body>
${args.content.convert()}
</body>
</html>
`
    }
  ),
}

const ESCAPE_CHAR = '\\';
const START_MANDATORY_ARGUMENT_CHAR = '{';
const END_MANDATORY_ARGUMENT_CHAR = '}';
const START_OPTIONAL_ARGUMENT_CHAR = '[';
const END_OPTIONAL_ARGUMENT_CHAR = ']';
const ESCAPABLE_CHARS = new Set([
  ESCAPE_CHAR,
  START_MANDATORY_ARGUMENT_CHAR,
  END_MANDATORY_ARGUMENT_CHAR,
  START_OPTIONAL_ARGUMENT_CHAR,
  END_OPTIONAL_ARGUMENT_CHAR,
]);

const char_is_alphanumeric = function(c) {
  let code = c.codePointAt(0);
  return (
    // 0-9
    (code > 47 && code < 58) ||
    // A-Z
    (code > 64 && code < 91) ||
    // a-z
    (code > 96 && code < 123)
  )
}

// Valid macro name characters.
const char_is_macro = function (c) {
  return char_is_alphanumeric(c) || c === '_';
};
char_is_macro.chars = new Set(['-', '_']);

const closing_token = function(token) {
  if (token === TokenType.MANDATORY_ARGUMENT_START)
    return TokenType.OPTIONAL_ARGUMENT_END;
  if (token === TokenType.MANDATORY_ARGUMENT_START)
    return TokenType.OPTIONAL_ARGUMENT_END;
  return undefined;
}

const report_error = function(line, column, message) {
  console.error(`error at line ${line} column ${column}: ${message}`);
}

/**
 * @param {String} input_string
 * @returns {Array[Token]}
 */
const tokenize = function(input_string, extra_returns={}) {
  // https://stackoverflow.com/questions/21397316/split-javascript-string-into-array-of-codepoints-taking-into-account-surrogat/42596897#42596897
  let chars = Array.from(input_string);
  let tokens = [];
  let i = -1;
  let line = 1;
  let column = 0;
  let cur_c;
  // Holds a FIFO with the currenty ongoing arguments.
  // We must maintain this to know which argument is literal or not.
  let macro_argument_stack = [];
  // We are just after a previous argument, or just after the macro name.
  // Therefore the next char could be the start of a new argument.
  let last_possible_new_argument_index;
  let failed = false;

  const error = function(message) {
    report_error(line, column, message);
    failed = true;
  }

  const assert_could_be_argument = function() {
    if (i !== last_possible_new_argument_index) {
      error('cannot start a macro argument here. It has to come after a macro name or another macro argument.');
    }
  }

  // Advance the current character and set cur_c to the next one.
  //
  // Maintain the newline count up to date for debug messages.
  //
  // The current index must only be incremented through this function
  // and never directly.
  const consume = function() {
    if (chars[i] === '\n') {
      line += 1;
      column = 1;
    } else {
      column += 1;
    }
    i += 1;
    if (i >= chars.length) {
      return false;
    }
    cur_c = chars[i];
    return true;
  }

  const consume_optional_newline = function() {
    if (cur_c === '\n') {
      consume();
    }
  }

  const push_token = function(token, value) {
    tokens.push(new Token(token, line, column, value));
  }

  const tokenize_plaintext = function(tokens, c) {
    let last_token = tokens[tokens.length - 1];
    if (last_token.type === TokenType.PLAINTEXT) {
      last_token.value += c;
    } else {
      push_token(TokenType.PLAINTEXT, c);
    }
  }

  push_token(TokenType.MACRO_NAME, 'toplevel');
  push_token(TokenType.MANDATORY_ARGUMENT_START);
  push_token(TokenType.MACRO_NAME, 'p');
  push_token(TokenType.MANDATORY_ARGUMENT_START);
  while (consume()) {
    if (cur_c === '\\') {
      next_c = chars[i + 1];
      if (ESCAPABLE_CHARS.has(next_c)) {
        tokenize_plaintext(tokens, next_c);
        consume();
      } else {
        let macro_name = '';
        consume();
        while (char_is_macro(cur_c)) {
          macro_name += cur_c;
          consume();
        }
        consume_optional_newline();
        last_possible_new_argument_index = i;
        push_token(TokenType.MACRO_NAME, macro_name);
        macro_argument_stack.push([macros[macro_name], 0]);
      }
    } else if (cur_c === START_OPTIONAL_ARGUMENT_CHAR) {
      assert_could_be_argument();
      consume_optional_newline();
    } else if (cur_c === END_OPTIONAL_ARGUMENT_CHAR) {
      consume_optional_newline();
      last_possible_new_argument_index = i;
    } else if (cur_c === START_MANDATORY_ARGUMENT_CHAR) {
      consume_optional_newline();
      push_token(TokenType.MANDATORY_ARGUMENT_START);
    } else if (cur_c === END_MANDATORY_ARGUMENT_CHAR') {
      consume_optional_newline();
      last_possible_new_argument_index = i;
      push_token(TokenType.MANDATORY_ARGUMENT_END);
    } else if (cur_c === '\n') {
      if (((i + 1) === chars.length)) {
        // Do nothing.
      } else if (chars[i + 1] === '\n') {
        // Double newline.
        push_token(TokenType.MANDATORY_ARGUMENT_END);
        push_token(TokenType.MACRO_NAME, 'p');
        push_token(TokenType.MANDATORY_ARGUMENT_START);
        consume();
        done = true;
      } else {
        tokenize_plaintext(tokens, cur_c);
      }
    } else {
      tokenize_plaintext(tokens, cur_c);
    }
  }
  push_token(TokenType.MANDATORY_ARGUMENT_END);
  push_token(TokenType.MANDATORY_ARGUMENT_END);
  extra_returns.failed = true;
  return tokens;
}

const parse = function(tokens) {
  let state = {
    i: 0,
  }
  return parse_sub(tokens, state)
}

const AstNode = class {
  /**
   * @param {String} type - plaintext or macro
   * @param {Object[String, Array[AstNode]|String} arguments
   *        If type is macro, the Object with child arguments.
   *        Otherwise, it ype is text, , the raw String.
   */
  constructor(macro_name, args) {
    this.macro_name = macro_name;
    this.args = args;
  }
}

const parse_sub = function(tokens, state) {
  let cur_token;
  let cur_type;
  let ast = {
    args: {},
  };

  const consume = function() {
    state.i += 1;
    if (state.i >= tokens.length)
      return undefined;
    cur_token = tokens[state.i];
    cur_type = cur_token.type;
    return token;
  }

  const previous = function() {
    i = state.i - i;
    if (i < 0)
      return undefined;
    return tokens[i];
  }

  while (consume() !== undefined) {
    if (cur_type === TokenType.MACRO_NAME) {
      ast.macro_name = cur_token.value;
      consume();
      let arg_count = 0;
      let children = [];
      while (cur_type === TokenType.MANDATORY_ARGUMENT_START || cur_type === TokenType.OPTIONAL_ARGUMENT_START) {
        let arg = []
        let open_type = cur_type;
        children.push(parse_sub(tokens, state));
        if (previous().type !== closing_token(open_type)) {
          report_error(
            token.line,
            token.column,
            `expected a closing ${END_MANDATORY_ARGUMENT_CHAR}`
          );
        }
        arg_count += 1;
      }
      macro_node = {
        type: token.value,
        children: children
      }
    } else if (type === TokenType.PLAINTEXT) {
      children.push();
    } else if (token.type !== TokenType.MANDATORY_ARGUMENT_END) {
      return ast;
    }
    state.i += 1;
  }
  return ast;
}

const ast_to_output = function(ast) {
  return 'asdf';
}

/**
 * Main cirodown input to HTML/LaTeX/etc. output API wrapper.
 *
 * @returns {String}
 */
const convert = function(
  input_string,
  options,
  extra_returns={}
) {
  if (options === undefined) {
    options = {};
  }
  if (!'verbose' in options) {
    options.verbose = false;
  }
  let sub_extra_returns = {
    fail: false,
  };
  let tokens = tokenize(input_string, sub_extra_returns);
  if (sub_extra_returns.fail) {
    extra_returns.fail = true;
  }
  let ast = parse(tokens);
  let output = ast_to_output(ast);
  if (options.verbose) {
    console.log('input: ' + util.inspect(input_string));
    console.log();
    console.log('tokens:');
    console.log(tokens);
    console.log();
    console.log('ast:');
    console.log(ast);
    console.log();
    console.log('output: ' + util.inspect(output));
    console.log();
  }
  return output;
}

exports.convert = convert;

if (require.main === module) {
  let input;
  const encoding = 'utf8';
  if (process.argv.length > 2) {
    input = fs.readFileSync(process.argv[2], encoding);
  } else {
    input = fs.readFileSync(0, encoding);
  }
  let extra_returns = {};
  console.log(convert(
    input,
    {
      verbose: true,
    },
    extra_returns
  ));
  process.exit(!extra_returns.fail);
}
