#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const cirodown = require('cirodown');
const chokidar = require('chokidar');
const commander = require('commander');

const DEFAULT_IGNORE_BASENAMES = [
  '.git',
  'node_modules',
];
const DEFAULT_IGNORE_BASENAMES_SET = new Set(DEFAULT_IGNORE_BASENAMES);

/** Report an error with the CLI usage and exit in error. */
function cli_error(message) {
  console.error(`error: ${message}`);
  process.exit(1);
}

/** Convert input from a string to output and return the output as a string.
 *
 * Wraps cirodown.convert with CLI usage convenience.
 *
 * @param {String} input
 * @return {String}
 */
function convert_input(input, options, convert_input_options={}) {
  const new_options = Object.assign({}, options);
  if ('title' in convert_input_options) {
    new_options.title = convert_input_options.title;
  }
  new_options.extra_returns = {};
  let output = cirodown.convert(input, new_options, new_options.extra_returns);
  if (convert_input_options.cli_options.showTokens) {
    console.error('tokens:');
    console.error(JSON.stringify(new_options.extra_returns.tokens, null, 2));
    console.error();
  }
  if (convert_input_options.cli_options.showAst) {
    console.error('ast:');
    console.error(JSON.stringify(new_options.extra_returns.ast, null, 2));
    console.error();
  }
  for (const error of new_options.extra_returns.errors) {
    console.error(error.toString(convert_input_options.input_path));
  }
  if (new_options.extra_returns.errors.length > 0) {
    convert_input_options.had_error = true;
  }
  return output;
}

/** Convert .ciro to output format and save it to a file instead of returning as a string.
 *
 * The output file name is derived from the input file name with the output extension.
 */
function convert_path_to_file(input_path, options, convert_input_options={}) {
  let input_path_parse = path.parse(input_path);
  if (input_path_parse.ext === '.ciro') {
    let output = convert_path(input_path, options, convert_input_options);
    let output_path = path.join(input_path_parse.dir, input_path_parse.name) + '.html';
    if (convert_input_options.cli_options.outdir) {
      fs.mkdirSync(convert_input_options.cli_options.outdir, {recursive: true});
      output_path = path.join(convert_input_options.cli_options.outdir, output_path);
    }
    fs.writeFileSync(output_path, output);
  }
}

/** Convert input from a path to output and return the output as a string.
 *
 * @return {String}
 */
function convert_path(input_path, options, convert_input_options) {
  if (!('multifile' in convert_input_options)) {
    convert_input_options.multifile = false;
  }
  let new_convert_input_options = Object.assign({}, convert_input_options);
  if (convert_input_options.multifile) {
    new_convert_input_options.input_path = input_path;
  }
  let input = fs.readFileSync(input_path, new_convert_input_options.encoding);
  let output = convert_input(input, options, new_convert_input_options);
  if (new_convert_input_options.had_error) {
    convert_input_options.had_error = true;
  }
  return output;
}

/** https://stackoverflow.com/questions/5827612/node-js-fs-readdir-recursive-directory-search
 *
 * @param {Set} skip_basenames
 */
function* walk_files_recursively(file_or_dir, skip_basenames) {
  if (fs.lstatSync(file_or_dir).isDirectory()) {
    const dirents = fs.readdirSync(file_or_dir, {withFileTypes: true});
    for (const dirent of dirents) {
      if (!skip_basenames.has(dirent.name)) {
        const res = dirent.name;
        if (dirent.isDirectory()) {
          yield* walk_files_recursively(res, skip_basenames);
        } else {
          yield res;
        }
      }
    }
  } else {
    yield file_or_dir;
  }
}

// CLI options.
commander.option('--body-only', 'output only the content inside the HTLM body element', false);
commander.option('--help-macros', 'print the metadata of all macros to stdout in JSON format. https://cirosantilli.com/cirodown/#', false);
commander.option('--html-embed', 'TODO embed all external resources like images and linked CSS into a single HTML file', false);
commander.option('--outdir <outdir>', 'if the output would be saved to a file e.g. when building a directory, use this directory as the root');
commander.option('--output-format', 'output format');
commander.option('--show-ast', 'print the AST to stderr');
commander.option(
  '--show-ast-inside',
  'print the AST to stderr from inside convert before it returns. ' +
    'Useful to debug the program if conversion blow up on the next stages.'
);
commander.option('--show-parse', 'print parsing internals to stderr');
commander.option('--show-tokenize', 'print tokenization internals to stderr');
commander.option('--show-tokens', 'print the token stream to stderr');
commander.option(
  '--show-tokens-inside',
  'print the token stream to stderr from inside convert before it returns. ' +
    'Useful to debug the program if conversion blow up on the next stages. ' +
    'Also adds token index to the output, which makes debugging the parser ' +
    'way easier.'
);
commander.option('--watch', 'http://cirosantilli.com/cirodown#watch');
let inputPath;
commander.arguments(
  '[input_path]',
  undefined,
  'http://cirosantilli.com/cirodown#cirodown-executable',
).action(function (input_path) {
  inputPath = input_path;
});
commander.parse(process.argv);

// Action.
if (commander.helpMacros) {
  console.log(JSON.stringify(macro_list_to_macros(), null, 2));
} else {
  const encoding = 'utf8';
  let input;
  let title;
  let output;
  let options = {
    body_only: commander.bodyOnly,
    show_ast: commander.showAstInside,
    show_parse: commander.showParse,
    show_tokens: commander.showTokensInside,
    show_tokenize: commander.showTokenize,
  };
  let convert_input_options = {
    cli_options: commander,
    encoding: encoding,
    had_error: false,
    multifile: true,
  };
  if (inputPath === undefined) {
    if (commander.watch) {
      cli_error('--watch is incompatible from input from stdin');
    }
    title = 'stdin';
    input = fs.readFileSync(0, encoding);
    convert_input_options.multifile = false;
    output = convert_input(input, options, convert_input_options);
  } else {
    if (!fs.existsSync(inputPath)) {
      cli_error(`input_path does not exist: "${inputPath}"`);
    }
    if (commander.watch) {
      let watcher = chokidar.watch(inputPath, {ignored: DEFAULT_IGNORE_BASENAMES, ignoreInitial: true});
      watcher.on('change', function(path) {
        convert_path_to_file(path, options, convert_input_options);
      }).on('add',  function(path) {
        convert_path_to_file(path, options, convert_input_options);
      });
    } else {
      if (fs.lstatSync(inputPath).isFile()) {
        convert_input_options.multifile = false;
        output = convert_path(inputPath, options, convert_input_options);
      } else {
        for (const path of walk_files_recursively(inputPath, DEFAULT_IGNORE_BASENAMES_SET)) {
          convert_path_to_file(path, options, convert_input_options);
        }
      }
    }
  }
  if (output !== undefined) {
    console.log(output);
  }
  if (!commander.watch) {
    process.exit(convert_input_options.had_error);
  }
}
