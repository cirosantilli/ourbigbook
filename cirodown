#!/usr/bin/env node

const fs = require('fs');

const cirodown = require('cirodown');

// CLI options.
const program = require('commander');
program.option('--body-only', 'output only the content inside the HTLM body element', false);
program.option('--help-macros', 'print the metadata of all macros to stdout in JSON format. https://cirosantilli.com/cirodown/#', false);
program.option('--html-embed', 'TODO embed all external resources like images and linked CSS into a single HTML file', false);
program.option('--output-format', 'output format');
program.option('--show-ast', 'print the AST to stderr');
program.option(
  '--show-ast-inside',
  'print the AST to stderr from inside convert before it returns. ' +
    'Useful to debug the program if conversion blow up on the next stages.'
);
program.option('--show-parse', 'print parsing internals to stderr');
program.option('--show-tokenize', 'print tokenization internals to stderr');
program.option('--show-tokens', 'print the token stream to stderr');
program.option(
  '--show-tokens-inside',
  'print the token stream to stderr from inside convert before it returns. ' +
    'Useful to debug the program if conversion blow up on the next stages. ' +
    'Also adds token index to the output, which makes debugging the parser ' +
    'way easier.'
);
let inputPath;
program.arguments(
  '[input_path]',
  undefined,
  'Input path. If not given, read from stdin.',
).action(function (input_path) {
  inputPath = input_path;
});
program.parse(process.argv);

// Action.
if (program.helpMacros) {
  console.log(JSON.stringify(macro_list_to_macros(), null, 2));
} else {
  const encoding = 'utf8';
  let input;
  let title;
  if (inputPath === undefined) {
    title = 'stdin';
    input = fs.readFileSync(0, encoding);
  } else {
    title = inputPath;
    input = fs.readFileSync(inputPath, encoding);
  }
  let extra_returns = {};
  let output = cirodown.convert(
    input,
    {
      body_only: program.bodyOnly,
      show_ast: program.showAstInside,
      show_parse: program.showParse,
      show_tokens: program.showTokensInside,
      show_tokenize: program.showTokenize,
      title: title,
    },
    extra_returns
  );
  console.log(output);
  if (program.showTokens) {
    console.error('tokens:');
    console.error(JSON.stringify(extra_returns.tokens, null, 2));
    console.error();
  }
  if (program.showAst) {
    console.error('ast:');
    console.error(JSON.stringify(extra_returns.ast, null, 2));
    console.error();
  }
  let sorted_errors = extra_returns.errors.sort((a, b)=>{
    if (a.line < b.line)
      return -1;
    if (a.line > b.line)
      return 1;
    if (a.column < b.column)
      return -1;
    if (a.column > b.column)
      return 1;
    return 0;
  });
  for (const error of sorted_errors) {
    console.error(error.toString());
  }
  process.exit(extra_returns.errors.length > 0);
}
