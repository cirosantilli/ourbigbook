#!/usr/bin/env node

const { performance } = require('perf_hooks');

const china_dictatorship = require('china-dictatorship');
if (!china_dictatorship.get_data().includes("Tiannmen Square protests")) throw 0;

const child_process = require('child_process');
const fs = require('fs');
const path = require('path');

// This library is terrible, too much magic, hard to understand interface,
// does not do some obvious basics.
const commander = require('commander');
const is_installed_globally = require('is-installed-globally');
const { Liquid } = require('liquidjs');
const { Op } = require('sequelize')

const cirodown = require('cirodown');
const cirodown_nodejs = require('cirodown/nodejs');

const CIRODOWN_JSON_BASENAME = 'cirodown.json';
const CIRODOWN_TEX_BASENAME = 'cirodown.tex';
const LOG_OPTIONS = new Set([
  'ast',
  'ast-simple',
  'db',
  'headers',
  'tokens',
]);
const SASS_EXT = '.scss';
const DEFAULT_IGNORE_BASENAMES = [
  '.git',
  '.gitignore',
  '.sass-cache',
  'main.liquid.html',
  'node_modules',
  'package-lock.json',
  'package.json',
  cirodown_nodejs.TMP_DIRNAME,
  cirodown_nodejs.PACKAGE_SASS_BASENAME,
];
const DEFAULT_IGNORE_BASENAMES_SET = new Set(DEFAULT_IGNORE_BASENAMES);
const SQLITE_MAGIC_MEMORY_NAME = ':memory:'
exports.SQLITE_MAGIC_MEMORY_NAME = SQLITE_MAGIC_MEMORY_NAME

class IdProviderDbAdapter {
  constructor(non_cirodown_options) {
  }
}

class SqliteFileProvider extends cirodown.FileProvider {
  constructor(sequelize) {
    super();
    this.sequelize = sequelize;
    this.get_path_entry_cache = {}
    this.id_provider = undefined
  }

  async get_path_entry_fetch(path, context) {
    const rows = await this.sequelize.models.File.findAll({
      where: { path },
      include: this.sequelize.models.Id,
    })
    for (const row of rows) {
      this.get_path_entry_cache[row.path] = row
      if (
        // Happens on some unminimized condition when converting
        // cirosantilli.github.io @ 04f0f5bc03b9071f82b706b3481c09d616d44d7b + 1
        // twice with cirodown -S ., no patience to minimize and test now.
        row.Id !== null &&
        // We have to do this if here because otherwise it would overwrite the reconciled header
        // we have stiched into the tree with Include.
        !this.id_provider.id_cache[row.Id.idid]
      ) {
        this.id_provider.add_row_to_id_cache(row.Id, context)
      }
    }
  }

  get_path_entry(path) {
    return this.get_path_entry_cache[path]
  }
}

// Reconcile the database with information that depends only on existence of Cirodown files, notably:
// - remove any IDs from deleted files https://github.com/cirosantilli/cirodown/issues/125
// - prefetch all last_render timestamps in one go
async function reconcile_db_and_filesystem(input_path, cirodown_options, non_cirodown_options) {
  const sequelize = non_cirodown_options.sequelize
  if (sequelize) {
    const cirodown_paths_to_be_converted = []
    await convert_directory(
      input_path,
      cirodown_options,
      cirodown.clone_and_set(non_cirodown_options,
        'cirodown_paths_to_be_converted', cirodown_paths_to_be_converted),
    );
    const [,,file_rows] = await Promise.all([
      sequelize.models.Id.destroy({
        where: { path: { [Op.not]: cirodown_paths_to_be_converted } } }),
      sequelize.models.Ref.destroy({
        where: { defined_at: { [Op.not]: cirodown_paths_to_be_converted } } }),
      sequelize.models.File.findAll({
        where: { path: cirodown_paths_to_be_converted } }),
    ])
    const file_rows_dict = {}
    for (const file_row of file_rows) {
      file_rows_dict[file_row.path] = file_row
    }
    non_cirodown_options.file_rows_dict = file_rows_dict
  }
}

// Check for ID conflicts.
// Previously this was done inside cirodown.convert. But then we started skipping render by timestamp,
// so if you e.g. move an ID from one file to another, a common operation, then it would still see
// the ID in the previous file depending on conversion order. So we are moving it here instead at the end.
// Having this single query at the end also be slightly more efficient than doing each query separately per file converion.
async function check_duplicates(cirodown_options, non_cirodown_options) {
  const sequelize = non_cirodown_options.sequelize
  if (sequelize) {
    const duplicate_rows = await sequelize.models.Id.findDuplicates()
    if (duplicate_rows.length > 0) {
      const error_messages = []
      const duplicate_ids = {}
      for (const duplicate_row of duplicate_rows) {
        const ast = cirodown.AstNode.fromJSON(duplicate_row.ast_json)
        const source_location = ast.source_location
        error_messages.push(
          `ID duplicate: "${duplicate_row.idid}" defined at ${duplicate_row.path}:${source_location.line}:${source_location.column}`
        )
      }
      cli_error('\n' + error_messages.join('\n'))
    }
  }
}

/** Report an error with the CLI usage and exit in error. */
function cli_error(message) {
  console.error(`error: ${message}`);
  process.exit(1);
}

function cmd_get_stdout(cmd, args=[], options={}) {
  if (!('dry_run' in options)) {
    options.dry_run = false;
  }
  if (!('show_cmd' in options)) {
    options.show_cmd = true;
  }
  let out;
  const cmd_str = ([cmd].concat(args)).join(' ');
  if (options.show_cmd) {
    console.log(cmd_str);
  }
  if (!options.dry_run) {
    out = child_process.spawnSync(cmd, args);
  }
  let ret;
  if (options.dry_run) {
    ret = '';
  } else {
    if (out.status != 0 && options.throw_on_error) {
      let msg = `cmd: \n${cmd_str}\n`;
      if (out.stdout !== null) {
        msg += `stdout: \n${out.stdout.toString(cirodown_nodejs.ENCODING)}\n`;
      }
      if (out.stderr !== null) {
        msg += `stderr: \n${out.stderr.toString(cirodown_nodejs.ENCODING)}\n`;
      }
      throw msg;
    }
    ret = out.stdout.toString(cirodown_nodejs.ENCODING);
  }
  return ret;
}

/**
 * @param {String} input_path - path to a directory to convert files in
 */
async function convert_directory(input_path, cirodown_options, non_cirodown_options) {
  const ignore_fullpaths = new Set();
  for (const ignore of cirodown_options.cirodown_json.ignore) {
    ignore_fullpaths.add(path.join(non_cirodown_options.cirodown_json_dir, ignore));
  }
  for (const one_path of walk_files_recursively(
    input_path,
    DEFAULT_IGNORE_BASENAMES_SET,
    ignore_fullpaths,
  )) {
    await convert_path_to_file(
      one_path,
      cirodown_options,
      non_cirodown_options,
    );
    if (non_cirodown_options.had_error) {
      break;
    }
  }
}

/** Extract IDs from all input files into the ID database, without fully converting. */
async function convert_directory_extract_ids(input_path, cirodown_options, non_cirodown_options) {
  await convert_directory(
    input_path,
    cirodown.clone_and_set(cirodown_options, 'render', false),
    non_cirodown_options
  );
  if (non_cirodown_options.sequelize) {
    non_cirodown_options.sequelize
  }
}

/** Convert input from a string to output and return the output as a string.
 *
 * Wraps cirodown.convert with CLI usage convenience.
 *
 * @param {String} input
 * @param {Object} options - options to be passed to cirodown.convert
 * @param {Object} non_cirodown_options - control options for this function,
 *                 not passed to cirodown.convert. Also contains some returns:
 *                 - {bool} had_error
 *                 - {Object} extra_returns
 * @return {String}
 */
async function convert_input(input, cirodown_options, non_cirodown_options={}) {
  const new_options = Object.assign({}, cirodown_options);
  if ('input_path' in non_cirodown_options) {
    new_options.input_path = non_cirodown_options.input_path;
  }
  if ('title' in non_cirodown_options) {
    new_options.title = non_cirodown_options.title;
  }
  new_options.extra_returns = {};
  // If we don't where the output will go (the case for stdout) or
  // the user did not explicitly request full embedding, inline all CSS.
  // Otherwise, include and external CSS to make each page lighter.
  if (non_cirodown_options.commander.embedResources) {
    new_options.template_vars.style = fs.readFileSync(
      cirodown_nodejs.DIST_CSS_PATH,
      cirodown_nodejs.ENCODING
    );
    new_options.template_vars.post_body = `<script>${fs.readFileSync(
      cirodown_nodejs.DIST_JS_PATH, cirodown_nodejs.ENCODING)}</script>\n`;
     ;
  } else {
    let includes_str = ``;
    let scripts_str = ``;
    let includes = [];
    let scripts = [];
    let fonts = [];
    let fonts_local = [];
    let includes_local = [];
    let scripts_local = [];
    let template_includes_relative = [];
    let template_scripts_relative = [];
    let template_fonts_relative = [];
    const fonts_dist_basename = [
      'fa-brands-400',
      'fa-regular-400',
      'fa-solid-900',
    ].map(f => f + '.woff2')
    const fonts_dist = fonts_dist_basename.map(f => path.join(cirodown_nodejs.DIST_PATH, f))
    if (non_cirodown_options.publish) {
      template_includes_relative.push(
        path.relative(
          non_cirodown_options.outdir,
          non_cirodown_options.out_css_path
        )
      );
      template_scripts_relative.push(
        path.relative(
          non_cirodown_options.outdir,
          non_cirodown_options.out_js_path
        )
      );
      template_fonts_relative.push(...fonts_dist_basename)
    } else {
      includes_local.push(non_cirodown_options.out_css_path);
      scripts_local.push(non_cirodown_options.out_js_path);
      fonts_local.push(...fonts_dist)
    }
    if (
      cirodown_options.outfile !== undefined &&
      !is_installed_globally
    ) {
      for (const include of includes_local) {
        includes.push(path.relative(path.dirname(cirodown_options.outfile), include));
      }
      for (const script of scripts_local) {
        scripts.push(path.relative(path.dirname(cirodown_options.outfile), script));
      }
      for (const font of fonts_local) {
        fonts.push(path.relative(path.dirname(cirodown_options.outfile), font));
      }
    } else {
      includes.push(...includes_local);
      scripts.push(...scripts_local);
      fonts.push(...fonts_local);
    }

    for (const include of includes) {
      includes_str += `@import "${include}";\n`;
    }
    for (const script of scripts) {
      scripts_str += `<script src="${script}"></script>\n`;
    }
    for (const font of fonts) {
      // TODO move this into cirodown.css to not repeat it for every single file.
      // Requires thinking about relative paths in webpack CSS resolution, don't want to do that now.
      includes_str += `@font-face { font-family: ${path.parse(font).name}; src: url(${font}); }
`
    }
    new_options.template_vars.style = `\n${includes_str}`;
    new_options.template_vars.post_body = `${scripts_str}`;
    new_options.template_styles_relative = template_includes_relative;
    new_options.template_scripts_relative = template_scripts_relative;
    new_options.template_fonts_relative = template_fonts_relative;
  }
  // Finally, do the conversion!
  const output = await cirodown.convert(input, new_options, new_options.extra_returns);
  if (non_cirodown_options.log.tokens) {
    console.error('tokens:');
    console.error(JSON.stringify(new_options.extra_returns.tokens, null, 2));
    console.error();
  }
  if (non_cirodown_options.log.ast) {
    console.error('ast:');
    console.error(JSON.stringify(new_options.extra_returns.ast, null, 2));
    console.error();
  }
  if (non_cirodown_options.log['ast-simple']) {
    console.error('ast-simple:');
    console.error(new_options.extra_returns.ast.toString());
    console.error();
  }
  // Remove duplicate messages due to split header rendering. We could not collect
  // errors from that case at all maybe, but do we really want to run the risk of
  // missing errors?
  for (const error_string of remove_duplicates_sorted_array(new_options.extra_returns.errors.map(e => e.toString()))) {
    console.error(error_string);
  }
  non_cirodown_options.extra_returns = new_options.extra_returns;
  if (new_options.extra_returns.errors.length > 0) {
    non_cirodown_options.had_error = true;
  }
  cirodown.perf_print(new_options.extra_returns.context, 'convert_input_end')
  return output;
}

/** Convert filetypes that cirodown knows how to convert, and just copy those that we don't, e.g.:
 *
 * * .ciro to .html
 * * .scss to .css
 *
 * @param {string} input_path - path relative to the base_path, e.g. `./cirodown subdir` gives:
 *   base_path: "subdir" and input_path "index.ciro" amongst other files.
 *
 * The output file name is derived from the input file name with the output extension.
 */
async function convert_path_to_file(input_path, cirodown_options, non_cirodown_options={}) {
  let input_path_parse = path.parse(input_path);
  let msg_ret
  let output, first_output_path;
  let timestamp_skip = false
  if (input_path_parse.ext === cirodown.CIRODOWN_EXT) {
    let full_path = path.resolve(input_path);
    let input_path_parse = path.parse(full_path);
    let path_relative_to_cirodown_json;
    let input_path_relative_to_cirodown_json;
    if (non_cirodown_options.cirodown_json_dir !== undefined) {
      path_relative_to_cirodown_json = path.relative(non_cirodown_options.cirodown_json_dir, input_path_parse.dir);
      input_path_relative_to_cirodown_json = path.join(path_relative_to_cirodown_json, input_path_parse.base);
    }
    if (non_cirodown_options.cirodown_paths_to_be_converted) {
      non_cirodown_options.cirodown_paths_to_be_converted.push(input_path_relative_to_cirodown_json)
      return
    }
    msg_ret = convert_path_to_file_print_starting(cirodown_options, input_path)
    let new_options = Object.assign({}, cirodown_options);
    let new_non_cirodown_options = Object.assign({}, non_cirodown_options);
    let input = fs.readFileSync(full_path, new_non_cirodown_options.encoding);
    let input_path_basename_noext = input_path_parse.name;
    const sequelize = non_cirodown_options.sequelize
    if (input_path_relative_to_cirodown_json) {
      const file_row = non_cirodown_options.file_rows_dict[input_path_relative_to_cirodown_json]
      if (file_row !== undefined) {
        const mtime = fs.statSync(input_path).mtime
        if (cirodown_options.render) {
          timestamp_skip = non_cirodown_options.commander.renderTimestamp && file_row.last_render !== null && file_row.last_render > mtime
        } else {
          timestamp_skip = file_row.last_parse !== null && file_row.last_parse > mtime
        }
      }
    }
    if (!timestamp_skip) {
      new_non_cirodown_options.input_path = input_path_relative_to_cirodown_json;
      if (sequelize) {
        new_options.id_provider = non_cirodown_options.id_provider;
        new_options.file_provider = non_cirodown_options.file_provider;
      }
      const output = await convert_input(input, new_options, new_non_cirodown_options);
      const extra_returns = new_non_cirodown_options.extra_returns
      let first_output_path
      for (const outpath in extra_returns.rendered_outputs) {
        const output_path = path.join(non_cirodown_options.outdir, outpath);
        if (first_output_path === undefined) {
          first_output_path = output_path
        }
        fs.mkdirSync(path.dirname(output_path), {recursive: true});
        fs.writeFileSync(output_path, extra_returns.rendered_outputs[outpath]);
      }
      if (new_options.split_headers) {
        for (const header_ast of extra_returns.context.synonym_headers) {
          let new_options_redir = Object.assign({}, new_options);
          new_options_redir.id_provider = extra_returns.context.id_provider;
          await generate_redirect(new_options_redir, header_ast.id, header_ast.synonym, non_cirodown_options.outdir);
        }
      }

      const context = extra_returns.context;
      if (non_cirodown_options.log.headers) {
        console.error(context.header_tree.toString());
      }

      // Update the Sqlite databse with results from the conversion.
      cirodown.perf_print(context, 'convert_path_pre_sqlite')
      if ('sequelize' in non_cirodown_options) {

        cirodown.perf_print(context, 'convert_path_pre_sqlite_transaction')
        let toplevel_id;
        if (context.toplevel_ast !== undefined) {
          toplevel_id = context.toplevel_ast.id;
        }

        const file_bulk_create_opts = {}
        let file_bulk_create_last_parse
        if (new_non_cirodown_options.had_error) {
          file_bulk_create_last_parse = null
          file_bulk_create_last_render = null
          file_bulk_create_opts.ignoreDuplicates = true
        } else {
          file_bulk_create_opts.updateOnDuplicate = ['last_parse']
          file_bulk_create_last_parse = Date.now()
          if (cirodown_options.render) {
            file_bulk_create_opts.updateOnDuplicate.push('last_render')
            file_bulk_create_last_render = file_bulk_create_last_parse
          } else {
            file_bulk_create_last_render = null
          }
        }

        // This was the 80% bottleneck at Cirodown f8fc9eacfa794b95c1d9982a04b62603e6d0bb83
        // before being converted to a single transaction!
        // Likely would not have been a bottleneck if we new more about databases/had more patience
        // and instead of doing INSERT one by one we would do a single insert with a bunch of data.
        // The move to Sequelize made that easier with bulkCreate. But keeping the transaction just in case
        await non_cirodown_options.sequelize.transaction(async (transaction) => {
          file_bulk_create_opts.transaction = transaction
          await Promise.all([
            non_cirodown_options.id_provider.update(
              new_non_cirodown_options.extra_returns,
              non_cirodown_options.sequelize,
              transaction,
            ),
            non_cirodown_options.sequelize.models.File.bulkCreate(
              [
                {
                  path: input_path_relative_to_cirodown_json,
                  toplevel_id,
                  last_parse: file_bulk_create_last_parse,
                  last_render: file_bulk_create_last_render,
                },
              ],
              file_bulk_create_opts,
            )
          ])
        });
        cirodown.perf_print(context, 'convert_path_post_sqlite_transaction')
      }
      if (new_non_cirodown_options.had_error) {
        non_cirodown_options.had_error = true;
      }
    }
  } else {
    if (non_cirodown_options.cirodown_paths_to_be_converted) {
      // I should use callbacks instead of doing this. But lazy.
      return
    }
    let output_name = input_path_parse.name;
    let output_path_noext = path.join(
      path.relative(non_cirodown_options.cirodown_json_dir, input_path_parse.dir),
      output_name
    );
    if (cirodown_options.outfile === undefined) {
      output_path_noext = path.join(non_cirodown_options.outdir, output_path_noext);
    } else {
      output_path_noext = cirodown_options.outfile;
    }
    fs.mkdirSync(path.dirname(output_path_noext), {recursive: true});
    if (cirodown_options.render) {
      if (input_path_parse.ext === SASS_EXT) {
        first_output_path = output_path_noext + '.css'
        msg_ret = convert_path_to_file_print_starting(cirodown_options, input_path)
        fs.writeFileSync(
          first_output_path,
          require('sass').renderSync({
            data: fs.readFileSync(path.join(input_path), non_cirodown_options.encoding),
            outputStyle: 'compressed',
            includePaths: [
              path.dirname(cirodown_nodejs.PACKAGE_PATH),
            ],
          }).css
        );
      } else {
        // Otherwise, just copy the file over if needed.
        const output_path = output_path_noext + input_path_parse.ext;
        if (output_path !== path.resolve(input_path)) {
          console.log(`copy ${input_path} -> ${path.relative(process.cwd(), output_path)}`);
          fs.copyFileSync(input_path, output_path);
        }
      }
    }
  }

  if (msg_ret !== undefined) {
    let t1 = performance.now();
    let output_path_str
    if (
      cirodown_options.render &&
      // Happens if:
      // - conversion to .tex
      first_output_path !== undefined
    ) {
      output_path_str = ` -> ${path.relative(process.cwd(), first_output_path)}`
    } else {
      output_path_str = ''
    }
    let done_str
    if (timestamp_skip) {
      done_str = `skipped by timestamp`
    } else {
      done_str = `finished in ${t1 - msg_ret.t0} ms`
    }
    console.log(`${msg_ret.message}${output_path_str} ${done_str}`);
  }
  if (cirodown_options.perf) {
    console.error(`perf convert_path_to_file_end ${performance.now()}`);
  }
  return output;
}

function convert_path_to_file_print_starting(cirodown_options, input_path) {
  let message_prefix;
  if (cirodown_options.render) {
    message_prefix = 'render';
  } else {
    message_prefix = 'extract_ids';
  }
  const message = `${message_prefix} ${input_path}`;
  const t0 = performance.now()
  console.log(message);
  return { message, t0 };
}

async function create_db(cirodown_options, non_cirodown_options) {
  perf_print('create_db_begin', cirodown_options)
  const db_dir = path.dirname(non_cirodown_options.db_options.storage);
  if (!fs.existsSync(db_dir)) {
    fs.mkdirSync(db_dir, {recursive: true});
  }
  const sequelize = await cirodown_nodejs.create_sequelize(non_cirodown_options.db_options)
  non_cirodown_options.sequelize = sequelize;
  non_cirodown_options.file_provider = new SqliteFileProvider(sequelize);
  non_cirodown_options.id_provider = new cirodown_nodejs.SqliteIdProvider(sequelize);
  perf_print('create_db_end', cirodown_options)
}

async function generate_redirect(cirodown_options, redirect_src_id, redirect_target_id, outdir) {
  cirodown_options = Object.assign({}, cirodown_options);
  cirodown_options.input_path = redirect_src_id;
  const outpath_basename = redirect_src_id + '.' + cirodown.HTML_EXT
  const outpath = path.join(outdir, outpath_basename);
  cirodown_options.outfile = outpath_basename;
  const redirect_href = await cirodown.convert_x_href(redirect_target_id, cirodown_options);
  if (redirect_href === undefined) {
    cli_error(`redirection target ID "${redirect_target_id}" not found`);
  }
  fs.mkdirSync(path.dirname(outpath), {recursive: true})
  // https://stackoverflow.com/questions/10178304/what-is-the-best-approach-for-redirection-of-old-pages-in-jekyll-and-github-page/36848440#36848440
  fs.writeFileSync(outpath,
`<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Redirecting...</title>
<link rel="canonical" href="${redirect_href}"/>
<meta http-equiv="refresh" content="0;url=${redirect_href}" />
</head>
<body>
<h1>Redirecting...</h1>
<a href="${redirect_href}">Click here if you are not redirected.<a>
<script>location='${redirect_href}'</script>
</body>
</html>
`);
}

async function generate_redirects(
  cirodown_options,
  cirodown_json,
  outdir
) {
  for (let redirect_src_id in cirodown_json.redirects) {
    const redirect_target_id = cirodown_json.redirects[redirect_src_id];
    await generate_redirect(cirodown_options, redirect_src_id, redirect_target_id, outdir);
  }
}

/** Return Set of branches in the repository. Hax. */
function git_branches(input_path) {
  const str = cmd_get_stdout('git', ['branch', '-a']).replace(/\n$/, '')
  const arr = (str === '') ? [] : str.split('\n');
  return new Set(arr.map(s => s.substring(2)));
}

function git_has_commit(input_path) {
  try {
    cmd_get_stdout('git', ['-C', input_path, 'log'], {throw_on_error: true})
    return true
  } catch(err) {
    return false
  }
}

function git_is_in_repo(input_path) {
  try {
    cmd_get_stdout('git', ['-C', input_path, 'status'], {throw_on_error: true})
    return true
  } catch(err) {
    return false
  }
}

/**
 * @return {String} full Git SHA of the source.
 */
function git_ls_files(input_path) {
  const ret = cmd_get_stdout(
    'git',
    ['-C', input_path, 'ls-files'],
    {
      show_cmd: false,
      throw_on_error: true
    }
  )
  ret.replace(/\n$/, '')
  if (ret === '') {
    return []
  } else {
    return ret.split('\n')
  }
}

/**
 * @return {String} full Git SHA of the source.
 */
function git_sha(input_path, src_branch) {
  const args = ['-C', input_path, 'log', '-n1', '--pretty=%H'];
  if (src_branch !== undefined) {
    args.push(src_branch);
  }
  return cmd_get_stdout('git', args, {show_cmd: false, throw_on_error: true}).slice(0, -1);
}

function git_toplevel(input_path) {
  return cmd_get_stdout('git', ['rev-parse', '--show-toplevel'], {
    show_cmd: false,
    throw_on_error: true
  }).slice(0, -1);
}

// https://stackoverflow.com/questions/37521893/determine-if-a-path-is-subdirectory-of-another-in-node-js
function is_subpath(parent, child) {
  const relative = path.relative(parent, child);
  return relative && !relative.startsWith('..') && !path.isAbsolute(relative);
}

// https://stackoverflow.com/questions/9355403/deleting-duplicates-on-sorted-array/61974900#61974900
function remove_duplicates_sorted_array(arr) {
  return arr.filter((e, i, a) => e !== a[i - 1]);
}

function perf_print(name, cirodown_options) {
  if (cirodown_options === undefined || cirodown_options.log.perf) {
    console.error(`perf ${name} t=${performance.now()}`);
  }
}

/** Render a template file from under template/ */
function renderTemplate(templateRelpath, outdir, env) {
  const template = fs.readFileSync(
    path.join(cirodown_nodejs.PACKAGE_PATH, 'template', templateRelpath),
    cirodown_nodejs.ENCODING
  );
  const out = (new Liquid()).parseAndRenderSync(
    template,
    env,
    {
      strictFilters: true,
      strictVariables: true,
    }
  );
  fs.writeFileSync(path.join(outdir, templateRelpath), out);
}

/** https://stackoverflow.com/questions/5827612/node-js-fs-readdir-recursive-directory-search
 *
 * @param {Set} skip_basenames
 * @param {Set} ignore_paths
 */
function* walk_files_recursively(file_or_dir, skip_basenames, ignore_paths) {
  if (fs.lstatSync(file_or_dir).isDirectory()) {
    const dirents = fs.readdirSync(file_or_dir, {withFileTypes: true});
    for (const dirent of dirents) {
      const res = path.join(file_or_dir, dirent.name);
      if (
        !skip_basenames.has(dirent.name) &&
        !ignore_paths.has(path.resolve(res))
      ) {
        if (dirent.isDirectory()) {
          yield* walk_files_recursively(res, skip_basenames, ignore_paths);
        } else {
          yield res;
        }
      }
    }
  } else {
    yield file_or_dir;
  }
}

// CLI options.
commander.option('--add-test-instrumentation', 'For testing only', false);
commander.option('--body-only', 'output only the content inside the HTLM body element', false);
commander.option('--china', 'https://cirosantilli.com/cirodown#china', false);
commander.option('--dry-run', "don't run most external commands https://github.com/cirosantilli/cirodown#dry-run", false);
commander.option('--dry-run-push', "don't run git push commands https://github.com/cirosantilli/cirodown#dry-run-push", false);
commander.option('--embed-includes', 'http://cirosantilli.com/cirodown#embed-include', false);
commander.option('--embed-resources', 'http://cirosantilli.com/cirodown#embed-resources', false);
commander.option('--fakeroot <fakeroot>', 'Stop searching for cirodown.json at this directory rather than at the filesystem root');
commander.option('--generate <name>', 'http://cirosantilli.com/cirodown#generate', false);
commander.option('--generate-redirects', 'http://cirosantilli.com/cirodown#redirects', false);
commander.option('--help-macros', 'print the metadata of all macros to stdout in JSON format. https://cirosantilli.com/cirodown#help-macros', false);
commander.option('-l, --log <log...>', 'http://cirosantilli.com/cirodown#log');
commander.option('--no-html-x-extension', 'http://cirosantilli.com/cirodown#no-html-x-extension');
commander.option('--no-db', 'ignore the ID database, mostly for testing https://cirosantilli.com/cirodown#internal-cross-file-references-internals');
commander.option('--no-render', "only extract IDs, don't render: https://cirosantilli.com/cirodown#no-render");
commander.option('-T, --no-render-timestamp', "don't skip render by timestamp: https://cirosantilli.com/cirodown#no-render-timestamp");
commander.option('--outdir <outdir>', 'http://cirosantilli.com/cirodown#outdir');
commander.option('-o, --outfile <outfile>', 'http://cirosantilli.com/cirodown#outfile');
commander.option('-O, --output-format <output-format>', 'https://cirosantilli.com/cirodown#output-format', 'html');
commander.option('-p --publish', 'http://cirosantilli.com/cirodown#publish', false);
commander.option('-P, --publish-commit <commit-message>', 'http://cirosantilli.com/cirodown#publish-commit');
commander.option('-S, --split-headers', 'http://cirosantilli.com/cirodown#split-headers', false);
commander.option('--stdout', 'print output to stdout instead of saving to a file', false);
commander.option('--template <template>', 'http://cirosantilli.com/cirodown#template');
commander.option('-w, --watch', 'http://cirosantilli.com/cirodown#watch', false);
// Originally added for testing, this allows the test filesystems to be put under the repository iteslf,
// otherwise they would pickup our toplevel cirodown.json.
commander.option('--unsafe-ace', 'https://cirosantilli.com/cirodown#unsafe-ace', false);
commander.option('--unsafe-xss', 'https://cirosantilli.com/cirodown#unsafe-xss');
let inputPath;
commander.arguments(
  '[input_path]',
  undefined,
  'http://cirosantilli.com/cirodown#cirodown-executable',
).action(function (input_path) {
  inputPath = input_path;
});
commander.parse(process.argv);

// main action.
(async () => {
if (commander.helpMacros) {
  console.log(JSON.stringify(cirodown.macro_list(), null, 2));
} else if (commander.china) {
  console.log(china_dictatorship.get_data());
} else {
  let input;
  let title;
  let output;
  let publish = commander.publish || commander.publishCommit !== undefined;
  let html_x_extension;
  let input_dir;
  if (inputPath === undefined) {
    if (publish || commander.watch || commander.generate) {
      inputPath = '.';
    }
  } else {
    if (commander.generate) {
      cli_error('canot give an input path with --generate');
    }
  }

  // Determine the cirodown.json file by walking up the directory tree.
  let input_path_is_file;
  if (inputPath === undefined) {
    // Input from stdin.
    input_dir = undefined;
    input_path_is_file = false;
  } else {
    if (!fs.existsSync(inputPath)) {
      cli_error('input path does not exist: ' + inputPath);
    }
    input_path_is_file = fs.lstatSync(inputPath).isFile();
    if (input_path_is_file) {
      input_dir = path.dirname(inputPath);
    } else {
      input_dir = inputPath;
    }
  }

  // Initialize cirodown.json and directories determined from it if present.
  let cirodown_json_dir;
  const cirodown_json = {};
  if (inputPath === undefined) {
    cirodown_json_dir = '.'
  } else {
    let curdir = path.resolve(inputPath);
    let initial_dir;
    if (fs.lstatSync(inputPath).isFile()) {
      curdir = path.dirname(curdir)
    }
    initial_dir = curdir;
    const fakeroot = commander.fakeroot === undefined ? undefined : path.resolve(commander.fakeroot)
    while (true) {
      const cirodown_json_path = path.join(curdir, CIRODOWN_JSON_BASENAME);
      if (fs.existsSync(cirodown_json_path)) {
        Object.assign(cirodown_json, JSON.parse(fs.readFileSync(cirodown_json_path)));
        cirodown_json_dir = curdir;
        break;
      }
      if (
        curdir === '/' ||
        curdir === fakeroot
      ) {
        break;
      }
      curdir = path.dirname(curdir)
    }
    if (cirodown_json_dir === undefined) {
      // No cirodown.json found.
      const cwd = process.cwd();
      if (is_subpath(cwd, inputPath)) {
        cirodown_json_dir = cwd
      } else {
        if (input_path_is_file) {
          cirodown_json_dir = path.dirname(inputPath)
        } else {
          cirodown_json_dir = inputPath
        }
      }
    }
  }
  let ignore;
  if (!('ignore' in cirodown_json)) {
    cirodown_json.ignore = [];
  }

  let split_headers;
  if (publish) {
    // GitHub pages target is the only one for now.
    html_x_extension = false;
    split_headers = true;
  } else {
    html_x_extension = commander.htmlXExtension;
    split_headers = commander.splitHeaders;
  }

  // Options that will be passed directly to cirodown.convert().
  const cirodown_options = {
    add_test_instrumentation: commander.addTestInstrumentation,
    body_only: commander.bodyOnly,
    cirodown_json: cirodown_json,
    embed_includes: commander.embedIncludes,
    fs_exists_sync: (my_path) => fs.existsSync(path.join(cirodown_json_dir, my_path)),
    html_x_extension: html_x_extension,
    output_format: commander.outputFormat,
    outfile: commander.outfile,
    path_sep: path.sep,
    read_include: (id) => {
      let found = undefined;
      let test = id + cirodown.CIRODOWN_EXT;
      if (fs.existsSync(path.join(cirodown_json_dir, test))) {
        found = test;
      }
      test = path.join(id, cirodown.INDEX_BASENAME_NOEXT + cirodown.CIRODOWN_EXT);
      if (found === undefined) {
        if (fs.existsSync(path.join(cirodown_json_dir, test))) {
          found = test;
        }
        if (found === undefined) {
          const id_parse = path.parse(id);
          if (id_parse.name === cirodown.INDEX_BASENAME_NOEXT) {
            for (let index_basename_noext of cirodown.INDEX_FILE_BASENAMES_NOEXT) {
              test = path.join(id_parse.dir, index_basename_noext + cirodown.CIRODOWN_EXT);
              if (fs.existsSync(path.join(cirodown_json_dir, test))) {
                found = test;
                break;
              }
            }
          }
        }
      }
      if (found !== undefined) {
        return [found, fs.readFileSync(path.join(cirodown_json_dir, found), cirodown_nodejs.ENCODING)];
      };
      return undefined;
    },
    // Part of considering file previews for source code.
    //read_file: (readpath, context) => {
    //  readpath = path.join(path.dirname(context.options.input_path), readpath)
    //  if (
    //    fs.existsSync(readpath) &&
    //    // Let's prevent path transverasl a bit by default.
    //    path.resolve(readpath).startsWith(path.resolve(cirodown_json_dir))
    //  ) {
    //    return fs.readFileSync(readpath, cirodown_nodejs.ENCODING);
    //  } else {
    //    return undefined
    //  }
    //},
    render: commander.render,
    split_headers: split_headers,
    template_vars: {},
    unsafe_xss: commander.unsafeXss,
  };

  cirodown_options.log = {};
  const non_cirodown_options_log = {};
  if (commander.log !== undefined) {
    for (const log of commander.log) {
      if (cirodown.LOG_OPTIONS.has(log)) {
        cirodown_options.log[log] = true;
      } else if (LOG_OPTIONS.has(log)) {
        non_cirodown_options_log[log] = true;
      } else {
        cli_error('unknown --log option: ' + log);
      }
    }
  }
  let template_path;

  if (commander.template !== undefined) {
    template_path = commander.template;
  } else if ('template' in cirodown_json) {
    template_path = path.join(cirodown_json_dir, cirodown_json.template);
  }
  if (template_path === undefined) {
    cirodown_options.template = undefined;
  } else {
    cirodown_options.template = fs.readFileSync(template_path).toString();
  }

  if (inputPath !== undefined) {
    try {
      cirodown_options.template_vars.git_sha = git_sha(input_dir);
    } catch(error) {
      // Not in a git repo.
    }
  }
  let outdir;
  if (commander.outdir === undefined) {
    if (commander.generate) {
      outdir = '.'
    } else {
      outdir = cirodown_json_dir;
    }
  } else {
    outdir = commander.outdir;
  }
  if (commander.generate) {
    let generate = commander.generate
    if (generate === 'subdir') {
      outdir = path.join(outdir, 'docs')
    }
    fs.mkdirSync(outdir, {recursive: true});

    // Generate package.json.
    const package_json = JSON.parse(fs.readFileSync(
      cirodown_nodejs.PACKAGE_PACKAGE_JSON_PATH).toString());
    const package_json_str = `{
  "dependencies": {
    "cirodown": "${package_json.version}"
  }
}
`;
    fs.writeFileSync(path.join(outdir, 'package.json'), package_json_str);

    // Generate .gitignore. Reuse our gitignore up to the first blank line.
    let gitignore_new = '';
    const gitignore = fs.readFileSync(
      cirodown_nodejs.GITIGNORE_PATH,
      cirodown_nodejs.ENCODING
    );
    for (const line of gitignore.split('\n')) {
      if (line === '') {
        break;
      }
      gitignore_new += line + '\n';
    }
    fs.writeFileSync(path.join(outdir, '.gitignore'), gitignore_new);

    const new_cirodown_json = {};
    let title = 'Cirodown Template';
    let multifile
    if (generate === 'default') {
      renderTemplate('not-readme.ciro', outdir, {});
      multifile = true
    } else {
      title += ' ' + generate
      multifile = false
    }
    renderTemplate('README.ciro', outdir, {
      title,
      multifile,
      version: package_json.version,
    });
    if (multifile) {
      fs.copyFileSync(path.join(cirodown_nodejs.PACKAGE_PATH, 'main.liquid.html'),
        path.join(outdir, 'main.liquid.html'));
      fs.copyFileSync(path.join(cirodown_nodejs.PACKAGE_PATH, 'main.scss'),
        path.join(outdir, 'main.scss'));
      new_cirodown_json.template = 'main.liquid.html';
    }

    if (new_cirodown_json !== {}) {
      fs.writeFileSync(path.join(outdir, CIRODOWN_JSON_BASENAME),
        JSON.stringify(new_cirodown_json, null, 2) + '\n');
    }
    process.exit(0);
  }
  let tmpdir
  if (
    // Possible on intput from stdin.
    outdir !== undefined
  ) {
    tmpdir = path.join(outdir, cirodown_nodejs.TMP_DIRNAME);
    if (
      commander.outdir === undefined &&
      cirodown_json.outputOutOfTree
    ) {
      outdir = path.join(tmpdir, 'html')
    }
  }
  // Options that are not directly passed to cirodown.convert
  // but rather used only by this cirodown executable.
  const non_cirodown_options = {
    cirodown_json_dir,
    cirodown_paths_to_be_converted: undefined,
    commander,
    db_options: {},
    file_rows_dict: {},
    encoding: cirodown_nodejs.ENCODING,
    external_css_and_js: false,
    had_error: false,
    log: non_cirodown_options_log,
    out_css_path: cirodown_nodejs.DIST_CSS_PATH,
    out_js_path: cirodown_nodejs.DIST_JS_PATH,
    outdir,
    publish,
  };
  if (!non_cirodown_options_log.db) {
    // They do not like true, has to be false or function.
    // And setting undefined is also considered true.
    non_cirodown_options.db_options.logging = false;
  }
  let input_git_toplevel;
  let subdir_relpath;
  let publish_tmpdir;
  if (inputPath === undefined) {
    // Input from stdin.
    title = 'stdin';
    input = fs.readFileSync(0, cirodown_nodejs.ENCODING);
    output = await convert_input(input, cirodown_options, non_cirodown_options);
  } else {
    if (!fs.existsSync(inputPath)) {
      cli_error(`input_path does not exist: "${inputPath}"`);
    }
    let publish_dir;
    let cmd_options = {
      dry_run: commander.dryRun,
      throw_on_error: true,
    }
    if (!input_path_is_file) {
      if (commander.outfile !== undefined) {
        cli_error(`--outfile given but multiple output files must be generated, maybe you want --outdir?`);
      }
      if (publish) {
        input_git_toplevel = git_toplevel(inputPath);
        subdir_relpath = path.relative(input_git_toplevel, inputPath);
        publish_dir = path.join(tmpdir, 'publish');
        publish_git_dir = path.join(publish_dir, '.git');
        if (fs.existsSync(publish_git_dir)) {
          // This cleanup has to be done before the database initialization.
          cmd_get_stdout('git', ['-C', publish_dir, 'clean', '-x', '-d', '-f'], cmd_options);
        }
        publish_tmpdir = path.join(publish_dir, subdir_relpath, cirodown_nodejs.TMP_DIRNAME);
      }
    }
    if (publish_tmpdir === undefined) {
      publish_tmpdir = tmpdir;
    }

    // CIRODOWN_TEX_BASENAME
    let tex_path = path.join(cirodown_json_dir, CIRODOWN_TEX_BASENAME);
    const katex_macros = {};
    if (fs.existsSync(tex_path)) {
      require('katex').renderToString(
        fs.readFileSync(tex_path, cirodown_nodejs.ENCODING),
        {
          globalGroup: true,
          macros: katex_macros,
          output: 'html',
          strict: 'error',
          throwOnError: true,
        }
      );
    }
    cirodown_options.katex_macros = katex_macros;

    // Setup the ID database.
    if (commander.db) {
      non_cirodown_options.db_options.storage = path.join(publish_tmpdir, 'db.sqlite3');
    } else {
      non_cirodown_options.db_options.storage = SQLITE_MAGIC_MEMORY_NAME
    }
    if (commander.generateRedirects) {
      await generate_redirects(non_cirodown_options, cirodown_json, outdir);
      process.exit(0);
    }
    if (commander.watch) {
      if (publish) {
        cli_error('--publish and --watch are incompatible');
      }
      await create_db(cirodown_options, non_cirodown_options);
      if (!input_path_is_file) {
        await reconcile_db_and_filesystem(inputPath, cirodown_options, non_cirodown_options);
        await convert_directory_extract_ids(inputPath, cirodown_options, non_cirodown_options);
        await generate_redirects(non_cirodown_options, cirodown_json, outdir);
      }
      const watcher = require('chokidar').watch(inputPath, {ignored: DEFAULT_IGNORE_BASENAMES})
      const convert = async (subpath) => {
        await convert_path_to_file(subpath, cirodown_options, non_cirodown_options);
        await check_duplicates(cirodown_options, non_cirodown_options)
      }
      watcher.on('change', convert).on('add', convert)
    } else {
      if (input_path_is_file) {
        if (publish) {
          cli_error('--publish must take a directory as input, not a file');
        }
        await create_db(cirodown_options, non_cirodown_options);
        output = await convert_path_to_file(inputPath, cirodown_options, non_cirodown_options);
        await check_duplicates(cirodown_options, non_cirodown_options)
      } else {
        let actual_input_dir;
        let publish_branch;
        let publish_out_publish_dir;
        let remote_url;
        let src_branch;

        if (publish) {
          // Clone the source to ensure that only git tracked changes get built and published.
          if (!git_is_in_repo(inputPath)) {
            cli_error('--publish must point to a path inside a git repository');
          }
          remote_url = cmd_get_stdout('git', ['-C', inputPath, 'config', '--get', 'remote.origin.url'], cmd_options).slice(0, -1);
          src_branch = cmd_get_stdout('git', ['-C', inputPath, 'rev-parse', '--abbrev-ref', 'HEAD'], cmd_options).slice(0, -1);
          if (commander.dryRun) {
            remote_url = 'git@github.com:cirosantilli/cirodown.git';
            src_branch = 'master';
          }
          const parsed_remote_url = require("git-url-parse")(remote_url);
          if (parsed_remote_url.source !== 'github.com') {
            cli_error('only know how  to publish to origin == github.com currently, please send a patch');
          }
          let remote_url_path_components = parsed_remote_url.pathname.split(path.sep);
          if (remote_url_path_components[2].startsWith(remote_url_path_components[1] + '.github.io')) {
            publish_branch = 'master';
          } else {
            publish_branch = 'gh-pages';
          }
          if (src_branch === publish_branch) {
            cli_error(`source and publish branches are the same: ${publish_branch}`);
          }
          fs.mkdirSync(publish_dir, {recursive: true});
          if (commander.publishCommit !== undefined) {
            cmd_get_stdout('git', ['-C', inputPath, 'add', '-u'], cmd_options);
            cmd_get_stdout('git', ['-C', inputPath, 'commit', '-m', commander.publishCommit], cmd_options);
          }
          if (fs.existsSync(publish_git_dir)) {
            cmd_get_stdout('git', ['-C', publish_dir, 'checkout', '--', '.'], cmd_options);
            cmd_get_stdout('git', ['-C', publish_dir, 'pull'], cmd_options);
            cmd_get_stdout('git', ['-C', publish_dir, 'submodule', 'update', '--init'], cmd_options);
          } else {
            cmd_get_stdout('git', ['clone', '--recursive', input_git_toplevel, publish_dir],
              cirodown.clone_and_set(cmd_options, 'dry_run', false));
          }

          // Set some variables especially for publishing.
          actual_input_dir = path.join(publish_dir, subdir_relpath);
          non_cirodown_options.cirodown_json_dir = actual_input_dir;
          publish_out_publish_dir = path.join(publish_tmpdir, 'publish');
          non_cirodown_options.out_css_path = path.join(publish_out_publish_dir, cirodown_nodejs.DIST_CSS_BASENAME);
          non_cirodown_options.out_js_path = path.join(publish_out_publish_dir, cirodown_nodejs.DIST_JS_BASENAME);
          non_cirodown_options.external_css_and_js = true;
          // Remove all files from the gh-pages repository in case some were removed from the original source.
          if (
            fs.existsSync(path.join(publish_out_publish_dir, '.git'))
          ) {
            if (git_ls_files(publish_out_publish_dir).length > 0) {
              cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'rm', '-r', '-f', '.'], cmd_options);
            }
          } else {
            fs.mkdirSync(publish_out_publish_dir, {recursive: true});
          }
        } else {
          actual_input_dir = inputPath;
          publish_out_publish_dir = outdir;
        }
        non_cirodown_options.outdir = publish_out_publish_dir;
        await create_db(cirodown_options, non_cirodown_options);
        await reconcile_db_and_filesystem(actual_input_dir, cirodown_options, non_cirodown_options);

        // Do the actual conversion.
        await convert_directory_extract_ids(actual_input_dir, cirodown_options, non_cirodown_options);
        await check_duplicates(cirodown_options, non_cirodown_options)
        if (!non_cirodown_options.had_error) {
          await convert_directory(actual_input_dir, cirodown_options, non_cirodown_options);
        }
        if (!non_cirodown_options.had_error) {
          await generate_redirects(non_cirodown_options, cirodown_json, publish_out_publish_dir);
        }

        // Publish the converted output if build succeeded.
        if (publish && !non_cirodown_options.had_error) {
          // Push the original source.
          if (!commander.dryRunPush) {
            cmd_get_stdout('git', ['-C', inputPath, 'push'], cmd_options);
          }
          cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'init'], cmd_options);
          // https://stackoverflow.com/questions/42871542/how-to-create-a-git-repository-with-the-default-branch-name-other-than-master
          cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'checkout', '-B', publish_branch], cmd_options);
          try {
            // Fails if remote already exists.
            cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'remote', 'add', 'origin', remote_url], cmd_options);
          } catch(error) {
            cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'remote', 'set-url', 'origin', remote_url], cmd_options);
          }
          // Ensure that we are up-to-date with the upstream gh-pages if one exists.
          cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'fetch', 'origin'], cmd_options);
          cmd_get_stdout(
            'git',
            ['-C', publish_out_publish_dir, 'reset', `origin/${publish_branch}`],
            // Fails on the first commit in an empty repository.
            cirodown.clone_and_set(cmd_options, 'throw_on_error', false)
          );

          // Generate special files needed for GitHub pages.
          gemfile_content = "gem 'github-pages', group: :jekyll_plugins\n";
          fs.writeFileSync(path.join(publish_out_publish_dir, 'Gemfile'), gemfile_content);

          // Commit and push.
          if ('prepublish' in cirodown_json) {
            if (!commander.dryRun && !commander.unsafeAce) {
              cli_error('prepublish in cirodown.json requires running with --unsafe-ace');
            }
            const prepublish_path = cirodown_json.prepublish
            if (!fs.existsSync(prepublish_path)) {
              cli_error(`${CIRODOWN_JSON_BASENAME} prepublish file not found: ${prepublish_path}`);
            }
            try {
              cmd_get_stdout(path.resolve(prepublish_path), [publish_out_publish_dir]);
            } catch(error) {
              cli_error(`${CIRODOWN_JSON_BASENAME} prepublish command exited non-zero, aborting`);
            }
          }

          // Copy runtime assets from dist/ into the output repository.
          const dir = fs.opendirSync(cirodown_nodejs.DIST_PATH)
          let dirent
          while ((dirent = dir.readSync()) !== null) {
            require('fs-extra').copySync(
              path.join(cirodown_nodejs.DIST_PATH, dirent.name),
              path.join(publish_out_publish_dir, dirent.name)
            )
          }
          dir.closeSync()

          cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'add', '.'], cmd_options);
          source_commit = git_sha(inputPath, src_branch);
          const args = ['-C', publish_out_publish_dir, 'commit', '-m', source_commit]
          if (git_has_commit(publish_out_publish_dir)) {
            args.push('--amend')
          }
          cmd_get_stdout('git', args, cmd_options);
          if (!commander.dryRunPush) {
            cmd_get_stdout('git', ['-C', publish_out_publish_dir, 'push', '-f', 'origin', `${publish_branch}:${publish_branch}`], cmd_options);
            // Mark the commit with the `published` branch to make it easier to find what was last published.
            cmd_get_stdout('git', ['-C', inputPath, 'checkout', '-B', 'published'], cmd_options);
            cmd_get_stdout('git', ['-C', inputPath, 'push', '-f', '--follow-tags'], cmd_options);
            cmd_get_stdout('git', ['-C', inputPath, 'checkout', '-'], cmd_options);
          }
        }
      }
    }
  }
  if (
    inputPath === undefined ||
    (output !== undefined && commander.stdout)
  ) {
    process.stdout.write(output);
  }
  perf_print('exit', cirodown_options)
  if (!commander.watch) {
    process.exit(non_cirodown_options.had_error);
  }
}
})().catch((e) => {
  console.error(e);
  process.exit(1);
})
