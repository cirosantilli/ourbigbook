#!/usr/bin/env node

const fs = require('fs');
const util = require('util');

const yargs = require('commander')

const AstNode = class {
  /**
   * @param {AstType} node_type -
   * @param {String} macro_name - if node_type == AstType.PLAINTEXT: fixed to 'plaintext'
   *                              elif node_type == AstType.PARAGRAPH: fixed to undefined
   *                              else: arbitrary regular macro
   * @param {Object[String, Array[AstNode]|String} args
   *        If type is macro, the Object with child args.
   *        Otherwise, it ype is text, , the raw String.
   * @param {Number} line - the best representation of where the macro is starts in the document
   *                        used primarily to present useful debug messages
   * @param {Number} column
   */
  constructor(node_type, macro_name, args, line, column) {
    this.node_type = node_type;
    this.macro_name = macro_name;
    this.args = args;
    this.line = line;
    this.column = column;
  }

  convert(options, extra_returns={}) {
    if (!('errors' in extra_returns)) {
      extra_returns.errors = [];
    }
    return macros[this.macro_name].convert(this.args, options);
  }

  toJSON() {
    return {
      node_type:  this.node_type.toString(),
      macro_name: this.macro_name,
      args:       this.args,
      line:       this.line,
      column:     this.column
    }
  }
}

const ErrorMessage = class {
  constructor(message, line, column) {
    this.message = message;
    this.line = line;
    this.column = column;
  }

  toString() {
    let ret = 'error: ';
    let had_line_or_col = false;
    if (this.line !== undefined) {
      ret += `line ${this.line} `;
      had_line_or_col = true;
    }
    if (this.column !== undefined) {
      ret += `column ${this.column} `;
      had_line_or_col = true;
    }
    if (had_line_or_col)
      ret += ': ';
    ret += this.message;
    return ret
  }
}

// https://stackoverflow.com/questions/44447847/enums-in-javascript-with-es6/49709701#49709701
const make_enum = function(arr) {
  let obj = {};
  for (let val of arr){
    obj[val] = Symbol(val);
  }
  return Object.freeze(obj);
}

const TokenType = make_enum([
  'PLAINTEXT',
  'MACRO_NAME',
  'PARAGRAPH',
  'POSITIONAL_ARGUMENT_START',
  'POSITIONAL_ARGUMENT_END',
  'NAMED_ARGUMENT_START',
  'NAMED_ARGUMENT_END',
]);

const AstType = make_enum([
  'ERROR',
  'MACRO',
  'PLAINTEXT',
  'PARAGRAPH',
]);

const Token = class {
  /**
   * @param {String} type
   * @param {String} value - Default: undefined
   * @param {number} line
   * @param {number} column
   */
  constructor(type, line, column, value) {
    this.type = type;
    this.line = line;
    this.column = column;
    this.value = value;
  }

  toJSON() {
    return {
      type:   this.type.toString(),
      line:   this.line,
      column: this.column,
      value:  this.value
    }
  }
}

const Argument = class {
  /**
   * @param {String} name
   */
  constructor(options) {
    this.name = options.name;
    this.named_only = false;
  }
}

const Macro = class {
  /**
   * @param {String} name
   * @param {Array[Argument]} args
   * @param {Function} convert
   * @param {Object}
   *        {boolean} phrasing - is this phrasing content?
   *                  (HTML5 elements that can go in paragraphs). This matters to determine
   *                  where `\n\n` paragraphs will split.
   */
  constructor(name, args, convert, properties={}) {
    this.name = name;
    this.args = args;
    this.convert = convert;
    this.properties = properties;
    if (!('phrasing') in this.properties) {
      this.properties['phrasing'] = false;
    }
    this.name_to_arg = {};
    this.index_to_arg = {};
    let i = 0;
    for (const arg of args) {
      let name = arg.name;
      if (name in this.name_to_arg) {
        throw new Error('name already taken: ' + name);
      }
      this.name_to_arg[name] = arg;
      this.index_to_arg[i] = arg;
      i += 1;
    }
  }
}

// https://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript
const array_equals = function(arr1, arr2) {
  if (arr1.length !== arr2.length)
    return false;
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i])
      return false;
  }
  return true;
}

/**
 * Convert a list of arguments and join them up.
 *
 * @param {List[AstNode]} arg
 */
const convert_arg = function(arg) {
  let converted_arg = '';
  for (const ast_node of arg) {
    converted_arg += ast_node.convert()
  }
  return converted_arg;
}

let macro_list = [
  new Macro(
    'a',
    [
      new Argument({
        name: 'href',
      }),
      new Argument({
        name: 'content',
      }),
    ],
    function(args, options) {
      if ((!('content' in args))) {
        content = args.href;
      } else {
        content = args.content;
      }
      return `<a href="${convert_arg(args.href)}">${convert_arg(content)}</a>`
    },
    {
      phrasing: true,
    }
  ),
  new Macro(
    'c',
    [
      new Argument({
        name: 'content',
      }),
    ],
    function(args, options) {
      return `<code>${convert_arg(args.content)}</code>`
    },
    {
      phrasing: true,
    }
  ),
  new Macro(
    'h',
    [
      new Argument({
        name: 'level',
      }),
      new Argument({
        name: 'content',
      }),
      new Argument({
        name: 'id',
      }),
    ],
    function(args, options) {
      let content = convert_arg(args.content);
      let id;
      if ('id' in args) {
        id = convert_arg(args.id);
      } else {
        // TODO correct unicode aware algorithm.
        //let content_chars = content
        id = content.toLowerCase().replace(/[^a-z0-9-]+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
      }
      let level = convert_arg(args.level);
      return `<h${level} id="${id}">${content}</h${level}>\n`
    }
  ),
  new Macro(
    'p',
    [
      new Argument({
        name: 'content',
      }),
    ],
    function(args, options) {
      return `<p>${convert_arg(args.content)}</p>\n`
    }
  ),
  new Macro(
    'plaintext',
    [
      new Argument({
        name: 'content',
      }),
    ],
    function(args, options) {
      return args;
    },
    {
      phrasing: true,
    }
  ),
  new Macro(
    'toplevel',
    [
      new Argument({
        name: 'content',
      }),
      new Argument({
        name: 'title',
      }),
    ],
    function(args, options) {
      let title;
      if ('title' in args) {
        title = args.title;
      } else {
        if ('title' in options) {
          title = options['title'];
        } else {
          title = IN_OUTPUT_ERROR_PREFIX + 'missing title';
          if (!options.body_only) {
            report_error_noline('HTML requires a non-empty title');
            // TODO report error with exit status.
          }
        }
        title = [new AstNode(AstType.PLAINTEXT, 'plaintext', title, 1, 1)];
      }
      debugger;
      let ret = '';
      if (!options.body_only) {
        ret += `<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>${convert_arg(title)}</title>
<body>
`
      }
      ret += convert_arg(args.content);
      if (!options.body_only) {
        ret += `</body>
</html>
`
      }
      return ret;
    }
  ),
]

// Macros indexed by their name.
let macros = {};
for (const macro of macro_list) {
  macros[macro.name] = macro;
}

const IN_OUTPUT_ERROR_PREFIX = 'CIRODOWN_ERROR: ';
const ESCAPE_CHAR = '\\';
const START_POSITIONAL_ARGUMENT_CHAR = '[';
const END_POSITIONAL_ARGUMENT_CHAR = ']';
const START_NAMED_ARGUMENT_CHAR = '{';
const END_NAMED_ARGUMENT_CHAR = '}';
const ESCAPABLE_CHARS = new Set([
  ESCAPE_CHAR,
  START_POSITIONAL_ARGUMENT_CHAR,
  END_POSITIONAL_ARGUMENT_CHAR,
  START_NAMED_ARGUMENT_CHAR,
  END_NAMED_ARGUMENT_CHAR,
]);

const char_is_alphanumeric = function(c) {
  let code = c.codePointAt(0);
  return (
    // 0-9
    (code > 47 && code < 58) ||
    // A-Z
    (code > 64 && code < 91) ||
    // a-z
    (code > 96 && code < 123)
  )
}

// Valid macro name characters.
const char_is_macro = function (c) {
  return char_is_alphanumeric(c) || c === '_';
};
char_is_macro.chars = new Set(['-', '_']);

const closing_token = function(token) {
  if (token === TokenType.POSITIONAL_ARGUMENT_START)
    return TokenType.POSITIONAL_ARGUMENT_END;
  if (token === TokenType.NAMED_ARGUMENT_START)
    return TokenType.NAMED_ARGUMENT_END;
  return undefined;
}

/**
 * @param {String} input_string
 * @returns {Array[Token]}
 */
const tokenize = function(input_string, extra_returns={}) {
  // https://stackoverflow.com/questions/21397316/split-javascript-string-into-array-of-codepoints-taking-into-account-surrogat/42596897#42596897
  let chars = Array.from(input_string);
  let tokens = [];
  let i = 0;
  let line = 1;
  let column = 1;
  let cur_c = input_string[0];
  // Holds a FIFO with the currenty ongoing arguments.
  // We must maintain this to know which argument is literal or not.
  let macro_argument_stack = [];
  // We are just after a previous argument, or just after the macro name.
  // Therefore the next char could be the start of a new argument.
  let failed = false;
  extra_returns.errors = [];

  const error = function(message) {
    extra_returns.errors.push(new ErrorMessage(message, line, column));
  }

  // Advance the current character and set cur_c to the next one.
  //
  // Maintain the newline count up to date for debug messages.
  //
  // The current index must only be incremented through this function
  // and never directly.
  const consume = function() {
    if (chars[i] === '\n') {
      line += 1;
      column = 1;
    } else {
      column += 1;
    }
    i += 1;
    if (i >= chars.length) {
      return false;
    }
    cur_c = chars[i];
    return true;
  }

  const peek = function() {
    return chars[i + 1];
  }

  const consume_optional_newline = function() {
    if (!is_end() && cur_c === '\n' && peek() !== '\n') {
      consume();
    }
  }

  const is_end = function() {
    return i === chars.length;
  }

  const push_token = function(token, value, token_line, token_column) {
    if (token_line === undefined)
      token_line = line;
    if (token_column === undefined)
      token_column = column;
    tokens.push(new Token(token, token_line, token_column, value));
  }

  const tokenize_plaintext_char = function() {
    let last_token = tokens[tokens.length - 1];
    if (last_token.type === TokenType.PLAINTEXT) {
      last_token.value += cur_c;
    } else {
      push_token(TokenType.PLAINTEXT, cur_c);
    }
    consume();
  }

  // Ignore the last newline of the file.
  // It is good practice to always have a newline
  // at the end of files, but it doesn't really mean
  // that the user wants the last element to contain one.
  if (chars[chars.length - 1] === '\n') {
    chars.pop();
  }
  push_token(TokenType.MACRO_NAME, 'toplevel');
  push_token(TokenType.POSITIONAL_ARGUMENT_START);
  while (!is_end()) {
    if (cur_c === '\\') {
      let macro_start_line = line;
      let macro_start_column = column;
      consume();
      if (is_end()) {
        // Maybe this should be an error.
      } else if (ESCAPABLE_CHARS.has(cur_c)) {
        tokenize_plaintext_char();
      } else {
        let macro_name = '';
        while (char_is_macro(cur_c)) {
          macro_name += cur_c;
          consume();
          if (is_end())
            break;
        }
        consume_optional_newline();
        push_token(
          TokenType.MACRO_NAME,
          macro_name,
          macro_start_line,
          macro_start_column
        );
        macro_argument_stack.push([macros[macro_name], 0]);
      }
    } else if (cur_c === START_NAMED_ARGUMENT_CHAR) {
      consume();
      consume_optional_newline();
    } else if (cur_c === END_NAMED_ARGUMENT_CHAR) {
      consume();
      consume_optional_newline();
    } else if (cur_c === START_POSITIONAL_ARGUMENT_CHAR) {
      push_token(TokenType.POSITIONAL_ARGUMENT_START);
      consume();
      consume_optional_newline();
    } else if (cur_c === END_POSITIONAL_ARGUMENT_CHAR) {
      push_token(TokenType.POSITIONAL_ARGUMENT_END);
      consume();
      consume_optional_newline();
    } else if (cur_c === '\n') {
      if (peek() === '\n') {
        push_token(TokenType.PARAGRAPH);
        done = true;
        consume();
        consume();
      } else {
        tokenize_plaintext_char();
      }
    } else {
      tokenize_plaintext_char();
    }
  }
  // Close the opening of toplevel.
  push_token(TokenType.POSITIONAL_ARGUMENT_END);
  return tokens;
}

// Parse tokens into the AST tree.
const parse = function(tokens, options, extra_returns={}) {
  extra_returns.errors = [];
  let state = {
    extra_returns: extra_returns,
    i: 0,
    options: options,
    token: tokens[0],
    tokens: tokens,
  };
  let ast = parse_macro(state);
  if (state.i < tokens.length) {
    parse_report_error(state, `unexpected tokens at the end of input`);
  }

  // Post process the AST to support the insane paragraphs double newline syntax.
  // Loop over it, search for all PARAGRAPH entries, and add paragraph nodes.
  let todo_visit = [ast];
  while (todo_visit.length > 0) {
    const node = todo_visit.shift();
    for (const arg_name in node.args) {
      const arg = node.args[arg_name];
      let paragraph_indexes = [];
      for (let i = 0; i < arg.length; i++) {
        const ast_node = arg[i];
        if (ast_node.node_type === AstType.PARAGRAPH) {
          paragraph_indexes.push(i);
        }
        todo_visit.push(ast_node);
      }
      if (paragraph_indexes.length > 0) {
        let new_arg = [];
        let paragraph_start = 0;
        for (const paragraph_index of paragraph_indexes) {
          parse_add_paragraph(state, new_arg, arg, paragraph_start, paragraph_index);
          paragraph_start = paragraph_index + 1;
        }
        parse_add_paragraph(state, new_arg, arg, paragraph_start, arg.length);
        node.args[arg_name] = new_arg;
      }
    }
  }

  return ast;
}

// Maybe add a paragraph after a \n\n.
const parse_add_paragraph = function(
  state, new_arg, arg, paragraph_start, paragraph_end
) {
  parse_log_debug(state, 'function: parse_add_paragraph');
  parse_log_debug(state, 'arg: ' + JSON.stringify(arg, null, 2));
  parse_log_debug(state, 'paragraph_start: ' + paragraph_start);
  parse_log_debug(state, 'paragraph_end: ' + paragraph_end);
  parse_log_debug(state);
  let slice = arg.slice(paragraph_start, paragraph_end);
  if (macros[arg[paragraph_start].macro_name].properties.phrasing) {
    new_arg.push(
      new AstNode(
        AstType.MACRO,
        'p',
        {
          'content': slice
        },
        arg[paragraph_start].line,
        arg[paragraph_start].column,
      )
    );
  } else {
    new_arg.push(...slice);
  }
}

// Consume one token.
const parse_consume = function(state) {
  state.i += 1;
  if (state.i >= state.tokens.length)
    return undefined;
  state.token = state.tokens[state.i];
  parse_log_debug(state, 'function: parse_consume');
  parse_log_debug(state, 'state.i = ' + state.i.toString())
  parse_log_debug(state, 'state.token = ' + JSON.stringify(state.token));
  parse_log_debug(state);
  return state.token;
}

const parse_log_debug = function(state, msg='') {
  if (state.options.show_parse) {
    console.error('show_parse: ' + msg);
  }
}

// Parse one macro.
const parse_macro = function(state) {
  parse_log_debug(state, 'function: parse_macro');
  parse_log_debug(state, 'state = ' + JSON.stringify(state.token));
  parse_log_debug(state);
  if (state.token.type === TokenType.MACRO_NAME) {
    let macro_name = state.token.value;
    let macro_line = state.token.line;
    let macro_column = state.token.column;
    let arg_count = 0;
    let args = {};
    let macro;
    let macro_type;
    const unknown_macro_message = `unknown macro name: ${macro_name}\n`;
    if (macro_name in macros) {
      macro = macros[macro_name];
      macro_type = AstType.MACRO;
    } else {
      macro_type = AstType.ERROR;
      parse_report_error(state, unknown_macro_message);
    }
    // Consume the MACRO_NAME token out.
    parse_consume(state);
    while (
      state.token.type === TokenType.POSITIONAL_ARGUMENT_START ||
      state.token.type === TokenType.NAMED_ARGUMENT_START
    ) {
      let arg_name;
      if (state.token.type === TokenType.POSITIONAL_ARGUMENT_START) {
        if (macro_type === AstType.ERROR) {
          arg_name = arg_count.toString();
        } else {
          arg_name = macro.index_to_arg[arg_count].name;
        }
      } else {
        //arg = macro.index_to_arg[parse_consume(state)];
      }
      let open_type = state.token.type;
      let arg_children = [];
      // Consume the *_ARGUMENT_START token out.
      parse_consume(state);
      while (
        state.token.type !== TokenType.POSITIONAL_ARGUMENT_END &&
        state.token.type !== TokenType.NAMED_ARGUMENT_END
      ) {
        // The recursive case.
        arg_children.push(parse_macro(state));
      }
      if (state.token.type !== closing_token(open_type)) {
        parse_report_error(state,
          `expected a closing ${END_POSITIONAL_ARGUMENT_CHAR} found ${state.token.type.toString()}`);
      }
      args[arg_name] = arg_children;
      arg_count += 1;
      // Consume the *_ARGUMENT_END token out.
      parse_consume(state);
    }
    if (macro_type === AstType.ERROR) {
      return new AstNode(
        macro_type,
        'plaintext',
        IN_OUTPUT_ERROR_PREFIX + unknown_macro_message,
        state.token.line,
        state.token.column
      );
    } else {
      return new AstNode(macro_type, macro_name, args, macro_line, macro_column);
    }
  } else if (state.token.type === TokenType.PLAINTEXT) {
    // Non-recursive case.
    let node = new AstNode(
      AstType.PLAINTEXT,
      'plaintext',
      state.token.value,
      state.token.line,
      state.token.column
    );
    // Consume the PLAINTEXT node out.
    parse_consume(state);
    return node;
  } else if (state.token.type === TokenType.PARAGRAPH) {
    let node = new AstNode(
      AstType.PARAGRAPH,
      undefined,
      undefined,
      state.token.line,
      state.token.column
    );
    // Consume the PLAINTEXT node out.
    parse_consume(state);
    return node;
  } else {
    parse_report_error(
      state,
      `unexpected token ${state.token.type.toString()}`
    );
    let node = new AstNode(
      AstType.PLAINTEXT,
      'plaintext',
      IN_OUTPUT_ERROR_PREFIX + 'unexpected token\n',
      state.token.line,
      state.token.column
    );
    // Consume past whatever happened to avoid an infinite loop.
    parse_consume(state);
    return node;
  }
  state.i += 1;
}

const parse_report_error = function(state, message) {
  state.extra_returns.errors.push(new ErrorMessage(
    message, state.token.line, state.token.column));
}

/**
 * Main cirodown input to HTML/LaTeX/etc. output API wrapper.
 *
 * @returns {String}
 */
const convert = function(
  input_string,
  options,
  extra_returns={},
) {
  if (options === undefined) {
    options = {};
  }
  if (!('body_only'   in options)) { options.body_only   = false; }
  if (!('show_ast'    in options)) { options.show_ast = false; }
  if (!('show_parse'  in options)) { options.show_parse  = false; }
  if (!('show_tokens' in options)) { options.show_tokens = false; }
  extra_returns.errors = [];
  let sub_extra_returns;
  sub_extra_returns = {};
  let tokens = tokenize(input_string, sub_extra_returns);
  if (options.show_tokens) {
    console.error('tokens:');
    console.error(JSON.stringify(tokens, null, 2));
    console.error();
  }
  extra_returns.tokens = tokens;
  extra_returns.errors.push(...sub_extra_returns.errors);
  sub_extra_returns = {};
  let ast = parse(tokens, options, sub_extra_returns);
  if (options.show_ast) {
    console.error('ast:');
    console.error(JSON.stringify(ast, null, 2));
    console.error();
  }
  extra_returns.ast = ast;
  extra_returns.errors.push(...sub_extra_returns.errors);
  sub_extra_returns = {};
  output = ast.convert(options, sub_extra_returns);
  extra_returns.errors.push(...sub_extra_returns.errors);
  if (output[output.length - 1] !== '\n') {
    output += '\n';
  }
  return output;
}

exports.convert = convert;

if (require.main === module) {
  // CLI options.
  const program = require('commander');
  program.option('--body-only', 'output only the content inside the HTLM body element', false);
  program.option('--show-ast', 'print the AST to stderr');
  program.option(
    '--show-ast-inside',
    'print the AST to stderr from inside convert before it returns. ' +
      'Useful to debug the program if conversion blow up on the next stages.'
  );
  program.option('--show-parse', 'print parsing internals to stderr');
  program.option('--show-tokens', 'print the token stream to stderr');
  program.option(
    '--show-tokens-inside',
    'print the token stream to stderr from inside convert before it returns. ' +
      'Useful to debug the program if conversion blow up on the next stages.'
  );
  let inputPath;
  program.arguments(
    '[input_path]',
    undefined,
    'Input path. If not given, read from stdin.',
  ).action(function (input_path) {
    inputPath = input_path;
  });
  program.parse(process.argv);

  // Action.
  const encoding = 'utf8';
  let input;
  let title;
  if (inputPath === undefined) {
    title = 'stdin';
    input = fs.readFileSync(0, encoding);
  } else {
    title = inputPath;
    input = fs.readFileSync(inputPath, encoding);
  }
  let extra_returns = {};
  let output = convert(
    input,
    {
      body_only: program.bodyOnly,
      show_ast: program.showAstInside,
      show_parse: program.showParse,
      show_tokens: program.showTokensInside,
      title: title,
    },
    extra_returns
  );
  console.log(output);
  if (program.showTokens) {
    console.error('tokens:');
    console.error(JSON.stringify(extra_returns.tokens, null, 2));
    console.error();
  }
  if (program.showAst) {
    console.error('ast:');
    console.error(JSON.stringify(extra_returns.ast, null, 2));
    console.error();
  }
  for (const error of extra_returns.errors) {
    console.error(error.toString());
  }
  process.exit(extra_returns.errors.length > 0);
}
