#!/usr/bin/env node

const fs = require('fs');
const util = require('util');

const katex = require('katex')
const katex_macros = {}

const ESCAPE_CHAR = '\\';
const ID_SEPARATOR = '-';
const START_POSITIONAL_ARGUMENT_CHAR = '[';
const END_POSITIONAL_ARGUMENT_CHAR = ']';
const START_NAMED_ARGUMENT_CHAR = '{';
const NAMED_ARGUMENT_EQUAL_CHAR = '=';
const END_NAMED_ARGUMENT_CHAR = '}';
const ESCAPABLE_CHARS = new Set([
  ESCAPE_CHAR,
  START_POSITIONAL_ARGUMENT_CHAR,
  END_POSITIONAL_ARGUMENT_CHAR,
  START_NAMED_ARGUMENT_CHAR,
  END_NAMED_ARGUMENT_CHAR,
]);

const AstNode = class {
  /**
   * @param {AstType} node_type -
   * @param {String} macro_name - if node_type === AstType.PLAINTEXT: fixed to 'plaintext'
   *                              elif node_type === AstType.PARAGRAPH: fixed to undefined
   *                              else: arbitrary regular macro
   * @param {Object[String, Array[AstNode]|String]} args -
   *        If type is macro, the Object with child args.
   *        Otherwise, it type is text, the raw String.
   * @param {Number} line - the best representation of where the macro is starts in the document
   *                        used primarily to present useful debug messages
   * @param {Number} column
   * @param {Object} attrs
   *                 {boolean} has_paragraph_siblings: is the macro surrounded directly by \n\n paragraphs
   */
  constructor(node_type, macro_name, args, line, column, attrs={}) {
    this.node_type = node_type;
    this.macro_name = macro_name;
    this.args = args;
    this.line = line;
    this.column = column;
    const macro = macros[this.macro_name];

    // Set all non-given arguments to empty plaintext nodes by default,
    // and store which args were given or not.
    this.args_given = new Set();
    if (this.node_type === AstType.MACRO) {
      for (const arg_name in macro.name_to_arg) {
        if (arg_name in this.args) {
          this.args_given.add(arg_name);
        } else {
          // Default arguments not given to ''.
          this.args[arg_name] = [new AstNode(
            AstType.PLAINTEXT, 'plaintext', '', this.line, this.column)];
        }
      }
    }

    // Set the parents of all children.
    this.parent_node = undefined;
    if (this.node_type === AstType.MACRO) {
      for (const arg_name in this.args) {
        this.args[arg_name].parent_node = this;
      }
    }
  }

  arg_given(arg_name) {
    return this.args_given.has(arg_name);
  }

  /**
   * @param {Object} options - global options passed in from toplevel
   * @param {Object} context - things that are decided on ancestor nodes,
   *        and must trickle down to descendants.
   *
   *        If a call will change this object, it must first make a copy,
   *        otherwise future calls to non descendants would also be affected by the change.
   *
   *        {bool} html_is_attr - are we inside an HTML attribute, which implies implies different
   *               escape rules, e.g. " and ' must be escaped.
   *        {bool} html_escape - if false, disable HTML escaping entirely. This is needed for
   *               content that is passed for an external tool for processing, for example
   *               Math equations to KaTeX, In that case, the arguments need to be passed as is,
   *               otherwise e.g. `1 < 2` would escape the `<` to `&lt;` and KaTeX would receive bad input.
   *
   */
  convert(options, context) {
    if (context === undefined) {
      context = {};
    }
    if (!('html_is_attr' in context)) {
      context.html_is_attr = false;
    }
    if (!('html_escape' in context)) {
      context.html_escape = true;
    }
    if (!('errors' in options.extra_returns)) {
      options.extra_returns.errors = [];
    }
    return macros[this.macro_name].convert(this, options, context);
  }

  toJSON() {
    let args;
    if (this.node_type === AstType.MACRO) {
      args = object_subset(this.args, this.args_given);
    } else {
      args = this.args;
    }
    return {
      node_type:  this.node_type.toString(),
      macro_name: this.macro_name,
      args:       args,
      line:       this.line,
      column:     this.column
    }
  }
}

const ErrorMessage = class {
  constructor(message, line, column) {
    this.message = message;
    this.line = line;
    this.column = column;
  }

  toString() {
    let ret = 'error: ';
    let had_line_or_col = false;
    if (this.line !== undefined) {
      ret += `line ${this.line} `;
      had_line_or_col = true;
    }
    if (this.column !== undefined) {
      ret += `column ${this.column} `;
      had_line_or_col = true;
    }
    if (had_line_or_col)
      ret += ': ';
    ret += this.message;
    return ret
  }
}

// https://stackoverflow.com/questions/44447847/enums-in-javascript-with-es6/49709701#49709701
const make_enum = function(arr) {
  let obj = {};
  for (let val of arr){
    obj[val] = Symbol(val);
  }
  return Object.freeze(obj);
}

const TokenType = make_enum([
  'PLAINTEXT',
  'MACRO_NAME',
  'PARAGRAPH',
  'POSITIONAL_ARGUMENT_START',
  'POSITIONAL_ARGUMENT_END',
  'NAMED_ARGUMENT_START',
  'NAMED_ARGUMENT_END',
  'NAMED_ARGUMENT_NAME',
]);

const AstType = make_enum([
  'ERROR',
  'MACRO',
  'PLAINTEXT',
  'PARAGRAPH',
]);

const Token = class {
  /**
   * @param {String} type
   * @param {String} value - Default: undefined
   * @param {number} line
   * @param {number} column
   */
  constructor(type, line, column, value) {
    this.type = type;
    this.line = line;
    this.column = column;
    this.value = value;
  }

  toJSON() {
    return {
      type:   this.type.toString(),
      line:   this.line,
      column: this.column,
      value:  this.value
    }
  }
}

const MacroArgument = class {
  /**
   * @param {String} name
   */
  constructor(options) {
    this.name = options.name;
  }
}

const Macro = class {
  /**
   * Encapsulates properties of macros, including how to convert
   * them to various output formats.
   *
   * @param {String} name
   * @param {Array[MacroArgument]} args
   * @param {Function} convert
   * @param {Object}
   *        {boolean} phrasing - is this phrasing content?
   *                  (HTML5 elements that can go in paragraphs). This matters to determine
   *                  where `\n\n` paragraphs will split.
   *        {String} auto_parent - automatically surround consecutive sequences of macros with
   *                 the same parent auto_parent into a node with auto_parent type. E.g.,
   *                 to group list items into ul.
   *        {Set[String]} auto_parent_skip - don't do auto parent generation if the parent is one of these types.
   */
  constructor(name, positional_args, convert, options={}) {
    if (!('auto_parent' in options)) {
      options.auto_parent = undefined;
    }
    if (!('auto_parent_skip' in options)) {
      options.auto_parent_skip = new Set([]);
    }
    if (!('named_args' in options)) {
      options.named_args = [];
    }
    if (!('properties' in options)) {
      options.properties = {};
    }
    if (!('id_prefix' in options)) {
      options.id_prefix = title_to_id(name);
    }
    this.name = name;
    this.positional_args = positional_args;
    {
      let named_args = {};
      for (const arg of options.named_args) {
        named_args[arg.name] = arg;
      }
      this.named_args = named_args;
    }
    this.auto_parent = options.auto_parent;
    this.auto_parent_skip = options.auto_parent_skip;
    this.convert = convert;
    this.id_prefix = options.id_prefix;
    this.properties = options.properties;
    if (!('phrasing' in this.properties)) {
      this.properties['phrasing'] = false;
    }
    this.name_to_arg = {};
    for (const arg of this.positional_args) {
      let name = arg.name;
      this.check_name(name);
      this.name_to_arg[name] = arg;
    }
    for (const name in this.named_args) {
      this.check_name(name);
      this.name_to_arg[name] = this.named_args[name];
    }
    // Add the ID argument.
    this.named_args[Macro.id_argument_name] = new MacroArgument({
      name: Macro.id_argument_name,
    })
    this.name_to_arg[Macro.id_argument_name] = this.named_args[Macro.id_argument_name];
  }

  check_name(name) {
    if (name === Macro.id_argument_name) {
      throw new Error(`name "${Macro.id_argument_name}" is reserved and automatically added`);
    }
    if (name in this.name_to_arg) {
      throw new Error('name already taken: ' + name);
    }
  }

  toJSON() {
    return {
      name: this.name,
      positional_args: this.positional_args,
      named_args: this.named_args,
      properties: this.properties,
    }
  }

}
Macro.id_argument_name = 'id'
Macro.title_argument_name = 'title'

// https://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript
const array_equals = function(arr1, arr2) {
  if (arr1.length !== arr2.length)
    return false;
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i])
      return false;
  }
  return true;
}

const convert_arg = function(arg, options, context) {
  let converted_arg = '';
  for (const ast_node of arg) {
    converted_arg += ast_node.convert(options, context);
  }
  return converted_arg;
}

/** Helper to convert multiple parameters directly to HTML attributes.
 *
 * The ID is automatically included.
 *
 * @param {AstNode} ast
 * @param {Object} options
 * @param {Array[String]} arg_names - which argument names should be added as properties.
 *         Only arguments that were given in the text input are used.
 * @param {Object[String,AstNode]} custom_attrs - attributes that were not just passed in
 *        directly from the input text, but may have been calculated.
 */
const html_convert_attrs = function(
  ast, options, arg_names=[], custom_args={}
) {
  // Determine the arguments.
  let args = [];
  for (const arg_name in custom_args) {
    args.push([arg_name, custom_args[arg_name]]);
  }
  for (const arg_name of arg_names) {
    if (ast.arg_given(arg_name)) {
      args.push([arg_name, ast.args[arg_name]]);
    }
  }

  // Build the output string.
  let ret = '';
  for (const name_arg_pair of args) {
    [arg_name, arg] = name_arg_pair;
    ret += ` ${arg_name}="${convert_arg(arg, options, {html_is_attr: true})}"`;
  }
  return ret;
}

const katex_convert = function(ast, options, context) {
  let new_context = {...context};
  new_context.html_escape = false;
  try {
    return katex.renderToString(
      convert_arg(ast.args.content, options, new_context),
      {
        macros: macros,
        throwOnError: true,
        globalGroup: true
      }
    );
  } catch(error) {
    let message = error.toString();
    options.extra_returns.errors.push(
      new ErrorMessage(message, ast.args.content[0].line, ast.args.content[0].column)
    );
    return in_output_error(message);
  }
}

const title_to_id = function(title) {
  return title.toLowerCase()
    .replace(/[^a-z0-9-]+/g, ID_SEPARATOR)
    .replace(new RegExp('^' + ID_SEPARATOR + '+'), '')
    .replace(new RegExp(ID_SEPARATOR + '+$'), '')
  ;
}

/**
 * Same as html_convert_attrs, but automatically add the ID to the list
 * of arguments.
 */
const html_convert_attrs_id = function(
  ast, options, arg_names=[], custom_args={}
) {
  if (ast.arg_given('id')) {
    arg_names.push(Macro.id_argument_name);
  } else if(ast.arg_given('title')) {
    // TODO correct unicode aware algorithm.
    let id_text = '';
    let id_prefix = macros[ast.macro_name].id_prefix;
    if (id_prefix !== '') {
      id_text += id_prefix + ID_SEPARATOR
    }
    id_text += title_to_id(convert_arg(ast.args.title, options, {html_is_attr: true}));
    custom_args.id = [new AstNode(AstType.PLAINTEXT, 'plaintext', id_text, ast.line, ast.column)];
  }
  return html_convert_attrs(ast, options, arg_names, custom_args);
}

function html_escape_content(str) {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
  ;
}

function html_escape_attr(str) {
  return html_escape_content(str)
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;')
  ;
}

let macro_list = [
  new Macro(
    'a',
    [
      new MacroArgument({
        name: 'href',
      }),
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      if (ast.arg_given('content')) {
        content = ast.args.content;
      } else {
        content = ast.args.href;
      }
      return `<a${html_convert_attrs_id(ast, options, ['href'])}>${convert_arg(content, options, context)}</a>`;
    },
    {
      properties: {
        phrasing: true,
      }
    }
  ),
  new Macro(
    'C',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<pre${html_convert_attrs_id(ast, options)}><code>${convert_arg(ast.args.content, options, context)}</code></pre>\n`;
    },
  ),
  new Macro(
    'c',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<code${html_convert_attrs_id(ast, options)}>${convert_arg(ast.args.content, options, context)}</code>`;
    },
    {
      properties: {
        phrasing: true,
      }
    }
  ),
  new Macro(
    'h',
    [
      new MacroArgument({
        name: 'level',
      }),
      new MacroArgument({
        name: 'title',
      }),
    ],
    function(ast, options, context) {
      let title = convert_arg(ast.args.title, options, context);
      let level = convert_arg(ast.args.level, options, context);
      return `<h${level}${html_convert_attrs_id(ast, options)}>${title}</h${level}>\n`;
    },
    {
      id_prefix: '',
    }
  ),
  new Macro(
    'l',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<li${html_convert_attrs_id(ast, options)}>${convert_arg(ast.args.content, options, context)}</li>\n`;
    },
    {
      auto_parent: 'ul',
      auto_parent_skip: new Set(['ol'])
    }
  ),
  new Macro(
    'M',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<div>${katex_convert(ast, options, context)}</div>\n`;
    }
  ),
  new Macro(
    'm',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return katex_convert(ast, options, context);
    },
    {
      properties: {
        phrasing: true,
      }
    }
  ),
  new Macro(
    'ol',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<ol${html_convert_attrs_id(ast, options)}>\n${convert_arg(ast.args.content, options, context)}</ol>\n`;
    }
  ),
  new Macro(
    'Image',
    [
      new MacroArgument({
        name: 'src',
      }),
    ],
    function(ast, options, context) {
      let ret = `<figure${html_convert_attrs_id(ast, options)}>
<img${html_convert_attrs(ast, options, ['src', 'alt'])}>
`
      if (ast.arg_given(Macro.title_argument_name)) {
        ret += `<figcaption>${convert_arg(ast.args[Macro.title_argument_name], options, context)}</figcaption>\n`;
      }
      ret += '</figure>\n';
      return ret;
    },
    {
      named_args: [
        new MacroArgument({
          name: Macro.title_argument_name,
        }),
        new MacroArgument({
          name: 'description',
        }),
        new MacroArgument({
          name: 'source',
        }),
      ],
    }
  ),
  new Macro(
    'image',
    [
      new MacroArgument({
        name: 'src',
      }),
    ],
    function(ast, options, context) {
      let custom_args = {};
      if (ast.arg_given('title')) {
        custom_args[alt] = ast.args.title;
      }
      return `<img${html_convert_attrs_id(ast, options, ['src'], custom_args)}>`;
    },
    {
      named_args: [
        new MacroArgument({
          name: Macro.title_argument_name,
        }),
      ],
      phrasing: true,
    }
  ),
  new Macro(
    'p',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<p${html_convert_attrs_id(ast, options)}>${convert_arg(ast.args.content, options, context)}</p>\n`;
    }
  ),
  new Macro(
    'plaintext',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      if (context.html_escape) {
        if (context.html_is_attr) {
          return html_escape_attr(ast.args);
        } else {
          return html_escape_content(ast.args);
        }
      } else {
        return ast.args;
      }
    },
    {
      properties: {
        phrasing: true,
      }
    }
  ),
  new Macro(
    'table',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<table${html_convert_attrs_id(ast, options)}>\n${convert_arg(ast.args.content, options, context)}</table>\n`;
    },
  ),
  new Macro(
    'td',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<td${html_convert_attrs_id(ast, options)}>${convert_arg(ast.args.content, options, context)}</td>\n`;
    },
  ),
  new Macro(
    'toplevel',
    [
      new MacroArgument({
        name: 'content',
      }),
      new MacroArgument({
        name: 'title',
      }),
    ],
    function(ast, options, context) {
      let title;
      if (ast.arg_given('title')) {
        title = ast.args.title;
      } else {
        let text_title;
        if ('title' in options) {
          text_title = options['title'];
        } else {
          let message = 'missing title';
          text_title = in_output_error(message);
          if (!options.body_only) {
            extra_returns.errors.push(new ErrorMessage(message, line, column));
          }
        }
        title = [new AstNode(AstType.PLAINTEXT, 'plaintext', text_title, 1, 1)];
      }
      let ret = '';
      if (!options.body_only) {
        ret += `<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>${convert_arg(title, options, context)}</title>

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css"
  crossorigin="anonymous"
>
<style>
.katex { font-size: 1.5em; }
</style>

<style>
code {
  background-color: #EEEEEE;
}
pre {
  background-color: #EEEEEE;
}
</style>
<body>
`
      }
      ret += convert_arg(ast.args.content, options, context);
      if (!options.body_only) {
        ret += `</body>
</html>
`
      }
      return ret;
    }
  ),
  new Macro(
    'th',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<th${html_convert_attrs_id(ast, options)}>${convert_arg(ast.args.content, options, context)}</th>\n`;
    }
  ),
  new Macro(
    'tr',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<tr${html_convert_attrs_id(ast, options)}>\n${convert_arg(ast.args.content, options, context)}</tr>\n`;
    },
    {
      auto_parent: 'table',
    }
  ),
  new Macro(
    'ul',
    [
      new MacroArgument({
        name: 'content',
      }),
    ],
    function(ast, options, context) {
      return `<ul${html_convert_attrs_id(ast, options)}>\n${convert_arg(ast.args.content, options, context)}</ul>\n`;
    },
  ),
];

// Macros indexed by their name.
let macros = {};
for (const macro of macro_list) {
  macros[macro.name] = macro;
}

const char_is_alphanumeric = function(c) {
  let code = c.codePointAt(0);
  return (
    // 0-9
    (code > 47 && code < 58) ||
    // A-Z
    (code > 64 && code < 91) ||
    // a-z
    (code > 96 && code < 123)
  )
}

// Error message to be rendered in the output itself
// to serve as clear indication to end users that something is bad.
const in_output_error = function(msg) {
  return `[CIRODOWN_ERROR: ${msg}]`
}

// https://stackoverflow.com/questions/17781472/how-to-get-a-subset-of-a-javascript-objects-properties/17781518#17781518
const object_subset = function(source_object, keys) {
  const new_object = {};
  keys.forEach((obj, key) => { new_object[key] = source_object[key]; });
  return new_object;
}

// Valid macro name / argument characters.
// Compatible with JavaScript-like function names / variables.
const char_is_identifier = function (c) {
  return char_is_alphanumeric(c) || c === '_';
};

const closing_char = function(c) {
  if (c === START_POSITIONAL_ARGUMENT_CHAR)
    return END_POSITIONAL_ARGUMENT_CHAR;
  if (c === START_NAMED_ARGUMENT_CHAR)
    return END_NAMED_ARGUMENT_CHAR;
  throw new Error('char does not have a close: ' + c);
}

const closing_token = function(token) {
  if (token === TokenType.POSITIONAL_ARGUMENT_START)
    return TokenType.POSITIONAL_ARGUMENT_END;
  if (token === TokenType.NAMED_ARGUMENT_START)
    return TokenType.NAMED_ARGUMENT_END;
  throw new Error('token does not have a close: ' + token);
}

const Tokenizer = class {
  /**
   * @param {String} input_string
   */
  constructor(input_string, extra_returns={}, show_tokenize=false) {
    this.chars = Array.from(input_string);
    this.cur_c = this.chars[0];
    this.column = 1;
    this.extra_returns = extra_returns;
    this.extra_returns.errors = [];
    this.i = 0;
    this.line = 1;
    this.tokens = [];
    this.show_tokenize = show_tokenize;
  }

  // Advance the current character and set cur_c to the next one.
  //
  // Maintain the newline count up to date for debug messages.
  //
  // The current index must only be incremented through this function
  // and never directly.
  consume() {
    this.log_debug('consume');
    this.log_debug('this.i: ' + this.i);
    this.log_debug('this.cur_c: ' + this.cur_c);
    this.log_debug();
    if (this.chars[this.i] === '\n') {
      this.line += 1;
      this.column = 1;
    } else {
      this.column += 1;
    }
    this.i += 1;
    if (this.i >= this.chars.length) {
      this.cur_c = undefined;
      return false;
    }
    this.cur_c = this.chars[this.i];
    return true;
  }

  consume_plaintext_char() {
    this.plaintext_append_or_create(this.cur_c);
  }

  consume_optional_newline(literal) {
    if (
      !this.is_end() &&
      this.cur_c === '\n' &&
      (literal || this.peek() !== '\n')
    ) {
      this.consume();
    }
  }

  error(message) {
    this.extra_returns.errors.push(
      new ErrorMessage(message, this.line, this.column));
  }

  is_end() {
    return this.i === this.chars.length;
  }

  log_debug(message='') {
    if (this.show_tokenize) {
      console.error('tokenize: ' + message);
    }
  }

  peek() {
    return this.chars[this.i + 1];
  }

  plaintext_append_or_create(s) {
    let last_token = this.tokens[this.tokens.length - 1];
    if (last_token.type === TokenType.PLAINTEXT) {
      last_token.value += s;
    } else {
      this.push_token(TokenType.PLAINTEXT, s);
    }
    this.consume();
  }

  push_token(token, value, token_line, token_column) {
    this.log_debug('push_token');
    this.log_debug('token: ' + token.toString());
    this.log_debug('value: ' + value);
    this.log_debug();
    if (token_line === undefined)
      token_line = this.line;
    if (token_column === undefined)
      token_column = this.column;
    this.tokens.push(new Token(token, token_line, token_column, value));
  }

  /**
   * @returns {Array[Token]}
   */
  tokenize() {
    // Ignore the last newline of the file.
    // It is good practice to always have a newline
    // at the end of files, but it doesn't really mean
    // that the user wants the last element to contain one.
    if (this.chars[this.chars.length - 1] === '\n') {
      this.chars.pop();
    }
    // Add the magic implicit toplevel element.
    this.push_token(TokenType.MACRO_NAME, 'toplevel');
    this.push_token(TokenType.POSITIONAL_ARGUMENT_START);
    while (!this.is_end()) {
      this.log_debug('tokenize loop');
      this.log_debug('this.i: ' + this.i);
      this.log_debug('this.cur_c: ' + this.cur_c);
      this.log_debug();
      if (this.cur_c === ESCAPE_CHAR) {
        this.consume();
        let start_line = this.line;
        let start_column = this.column;
        if (this.is_end()) {
          // Maybe this should be an error.
        } else if (ESCAPABLE_CHARS.has(this.cur_c)) {
          this.consume_plaintext_char();
        } else {
          let macro_name = this.tokenize_func(char_is_identifier);
          this.consume_optional_newline();
          this.push_token(
            TokenType.MACRO_NAME,
            macro_name,
            start_line,
            start_column
          );
        }
      } else if (this.cur_c === START_NAMED_ARGUMENT_CHAR) {
        this.push_token(TokenType.NAMED_ARGUMENT_START);
        // Tokenize past the last open char.
        let open_length = this.tokenize_func(
          (c)=>{return c === START_NAMED_ARGUMENT_CHAR}
        ).length;
        let line = this.line;
        let column = this.column;
        let arg_name = this.tokenize_func(char_is_identifier);
        this.push_token(TokenType.NAMED_ARGUMENT_NAME, arg_name, line, column);
        if (this.cur_c !== NAMED_ARGUMENT_EQUAL_CHAR) {
          this.error(`expected character: '${NAMED_ARGUMENT_EQUAL_CHAR}' got '${this.cur_c}'`);
        }
        // Consume the = sign.
        this.consume();
        if (open_length === 1) {
          this.consume_optional_newline(true);
        } else {
          // Literal argument.
          let close_string = closing_char(
            START_NAMED_ARGUMENT_CHAR).repeat(open_length);
          this.tokenize_literal(START_NAMED_ARGUMENT_CHAR, close_string);
          this.push_token(TokenType.NAMED_ARGUMENT_END);
        }
      } else if (this.cur_c === END_NAMED_ARGUMENT_CHAR) {
        this.push_token(TokenType.NAMED_ARGUMENT_END);
        this.consume();
        this.consume_optional_newline();
      } else if (this.cur_c === START_POSITIONAL_ARGUMENT_CHAR) {
        this.push_token(TokenType.POSITIONAL_ARGUMENT_START);
        // Tokenize past the last open char.
        let open_length = this.tokenize_func(
          (c)=>{return c === START_POSITIONAL_ARGUMENT_CHAR}
        ).length;
        if (open_length === 1) {
          this.consume_optional_newline(true);
        } else {
          // Literal argument.
          let close_string = closing_char(
            START_POSITIONAL_ARGUMENT_CHAR).repeat(open_length);
          this.tokenize_literal(START_POSITIONAL_ARGUMENT_CHAR, close_string);
          this.push_token(TokenType.POSITIONAL_ARGUMENT_END);
        }
      } else if (this.cur_c === END_POSITIONAL_ARGUMENT_CHAR) {
        this.push_token(TokenType.POSITIONAL_ARGUMENT_END);
        this.consume();
        this.consume_optional_newline();
      } else if (this.cur_c === '\n') {
        if (this.peek() === '\n') {
          this.push_token(TokenType.PARAGRAPH);
          this.consume();
          this.consume();
        } else {
          this.consume_plaintext_char();
        }
      } else {
        this.consume_plaintext_char();
      }
    }
    // Close the opening of toplevel.
    this.push_token(TokenType.POSITIONAL_ARGUMENT_END);
    return this.tokens;
  }

  // Create a token with all consecutive chars that are accepted
  // by the given function.
  tokenize_func(f) {
    this.log_debug('tokenize_func');
    this.log_debug('this.i: ' + this.i);
    this.log_debug('this.cur_c: ' + this.cur_c);
    this.log_debug('');
    let value = '';
    while (f(this.cur_c)) {
      value += this.cur_c;
      this.consume();
      if (this.is_end())
        break;
    }
    return value;
  }

  /**
   * Start inside the literal argument after the opening,
   * and consume until its end.
   *
   * @returns {boolean} - true if OK, false if EOF unexpected EOF
   */
  tokenize_literal(open_char, close_string) {
    // Remove leading escapes.
    let i = this.i;
    while (this.chars[i] === ESCAPE_CHAR) {
      i++;
      if (this.is_end())
        return false;
    }
    if (this.chars[i] === open_char) {
      // Skip one of the escape chars if they are followed by an open.
      this.consume();
    } else {
      this.consume_optional_newline(true);
    }

    // Now consume the following unescaped part.
    let start_i = this.i;
    let start_line = this.line;
    let start_column = this.column;
    while (
      this.chars.slice(this.i, this.i + close_string.length).join('')
      !== close_string
    ) {
      if (!this.consume())
        return false;
    }
    // Handle trailing escape.
    let append;
    let end_i;
    if (
      this.chars[this.i - 1] === ESCAPE_CHAR &&
      this.chars.slice(this.i + 1, this.i + close_string.length + 1).join('') === close_string
    ) {
      // Ignore the trailing backslash.
      end_i = this.i - 1;
      // Consume the escaped closing char.
      this.consume();
      append = closing_char(open_char);
    } else {
      end_i = this.i;
      append = '';
    }
    this.push_token(
      TokenType.PLAINTEXT,
      this.chars.slice(start_i, end_i).join('') + append,
      start_line,
      start_column
    );

    // Skip over the closing string.
    for (let i = 0; i < close_string.length; i++)
      this.consume();
    return true;
  }
}

// Parse tokens into the AST tree.
const parse = function(tokens, options, extra_returns={}) {
  extra_returns.errors = [];
  let state = {
    extra_returns: extra_returns,
    i: 0,
    options: options,
    token: tokens[0],
    tokens: tokens,
  };
  // Call parse_macro on the toplevel macro. The entire document is
  // under that macro, so this will recursively parse everything.
  let ast = parse_macro(state);
  if (state.i < tokens.length) {
    parse_report_error(state, `unexpected tokens at the end of input`);
  }

  // Post process the AST breadth first to support:
  // * the insane but necessary paragraphs double newline syntax
  // * automatic ul parent to li and table to tr
  let todo_visit = [ast];
  while (todo_visit.length > 0) {
    const node = todo_visit.shift();
    if (node.node_type === AstType.MACRO) {
      for (const arg_name in node.args) {
        let arg = node.args[arg_name];

        // Add ul and table implicit parents.
        let new_arg = [];
        for (let i = 0; i < arg.length; i++) {
          let child_node = arg[i];
          let new_child_node;
          if (child_node.node_type === AstType.MACRO) {
            let child_name = child_node.macro_name;
            let child_macro = macros[child_name];
            if (child_macro.auto_parent !== undefined) {
              let auto_parent_name = child_macro.auto_parent;
              if (
                node.macro_name !== auto_parent_name &&
                !child_macro.auto_parent_skip.has(node.macro_name)
              ) {
                let start_auto_child_index = i;
                let start_auto_child_node = child_node;
                i++;
                while (
                  i < arg.length &&
                  arg[i].node_type === AstType.MACRO &&
                  macros[arg[i].macro_name].auto_parent === auto_parent_name
                ) {
                  i++;
                }
                new_child_node = new AstNode(
                  AstType.MACRO,
                  auto_parent_name,
                  {
                    'content': arg.slice(start_auto_child_index, i),
                  },
                  start_auto_child_node.line,
                  start_auto_child_node.column,
                )
                // Because the for loop will advance past it.
                i--;
              }
            }
          }
          if (new_child_node === undefined) {
            new_child_node = child_node;
          }
          new_arg.push(new_child_node);
        }
        arg = new_arg;

        // Add paragraphs.
        let paragraph_indexes = [];
        for (let i = 0; i < arg.length; i++) {
          const child_node = arg[i];
          if (child_node.node_type === AstType.PARAGRAPH) {
            paragraph_indexes.push(i);
          }
        }
        if (paragraph_indexes.length > 0) {
          new_arg = [];
          let paragraph_start = 0;
          for (const paragraph_index of paragraph_indexes) {
            parse_add_paragraph(state, new_arg, arg, paragraph_start, paragraph_index);
            paragraph_start = paragraph_index + 1;
          }
          parse_add_paragraph(state, new_arg, arg, paragraph_start, arg.length);
          arg = new_arg;
        }

        // Push children to continue the search.
        for (const child_node of arg) {
          todo_visit.push(child_node);
        }

        // Update the argument.
        node.args[arg_name] = arg;
      }
    }
  }

  return ast;
}

// Maybe add a paragraph after a \n\n.
const parse_add_paragraph = function(
  state, new_arg, arg, paragraph_start, paragraph_end
) {
  parse_log_debug(state, 'function: parse_add_paragraph');
  parse_log_debug(state, 'arg: ' + JSON.stringify(arg, null, 2));
  parse_log_debug(state, 'paragraph_start: ' + paragraph_start);
  parse_log_debug(state, 'paragraph_end: ' + paragraph_end);
  parse_log_debug(state);
  let slice = arg.slice(paragraph_start, paragraph_end);
  let macro = macros[arg[paragraph_start].macro_name];
  if (macro.properties.phrasing) {
    // If the first element after the double newline is phrasing content,
    // create a paragraph and put all elements inside the paragraph.
    new_arg.push(
      new AstNode(
        AstType.MACRO,
        'p',
        {
          'content': slice
        },
        arg[paragraph_start].line,
        arg[paragraph_start].column,
      )
    );
  } else {
    // Otherwise, don't create the paragraph, and keep all elements as they were.
    new_arg.push(...slice);
  }
}

// Consume one token.
const parse_consume = function(state) {
  state.i += 1;
  if (state.i >= state.tokens.length)
    return undefined;
  state.token = state.tokens[state.i];
  parse_log_debug(state, 'function: parse_consume');
  parse_log_debug(state, 'state.i = ' + state.i.toString())
  parse_log_debug(state, 'state.token = ' + JSON.stringify(state.token));
  parse_log_debug(state);
  return state.token;
}

const parse_log_debug = function(state, msg='') {
  if (state.options.show_parse) {
    console.error('show_parse: ' + msg);
  }
}

// Parse one macro.
const parse_macro = function(state) {
  parse_log_debug(state, 'function: parse_macro');
  parse_log_debug(state, 'state = ' + JSON.stringify(state.token));
  parse_log_debug(state);
  if (state.token.type === TokenType.MACRO_NAME) {
    let macro_name = state.token.value;
    let macro_line = state.token.line;
    let macro_column = state.token.column;
    let positional_arg_count = 0;
    let args = {};
    let macro;
    let macro_type;
    const unknown_macro_message = `unknown macro name: "${macro_name}"`;
    if (macro_name in macros) {
      macro = macros[macro_name];
      macro_type = AstType.MACRO;
    } else {
      macro_type = AstType.ERROR;
      parse_report_error(state, unknown_macro_message);
    }
    // Consume the MACRO_NAME token out.
    parse_consume(state);
    while (
      state.token.type === TokenType.POSITIONAL_ARGUMENT_START ||
      state.token.type === TokenType.NAMED_ARGUMENT_START
    ) {
      let arg_name;
      let open_type = state.token.type;
      let open_argument_line = state.token.line;
      let open_argument_column = state.token.column;
      // Consume the *_ARGUMENT_START token out.
      parse_consume(state);
      if (open_type === TokenType.POSITIONAL_ARGUMENT_START) {
        if (macro_type === AstType.ERROR) {
          arg_name = positional_arg_count.toString();
        } else {
          if (positional_arg_count >= macro.positional_args.length) {
            parse_report_error(state,
              `unknown named macro argument "${arg_name}" of macro "${macro_name}"`,
              open_argument_line,
              open_argument_column
            );
            arg_name = positional_arg_count.toString();
          } else {
            arg_name = macro.positional_args[positional_arg_count].name;
          }
          positional_arg_count += 1;
        }
      } else {
        // Named argument.
        let name_line = state.token.line;
        let name_column = state.token.column;
        arg_name = state.token.value;
        if (macro_type !== AstType.ERROR && !(arg_name in macro.named_args)) {
          parse_report_error(state,
            `unknown named macro argument "${arg_name}" of macro "${macro_name}"`,
            name_line,
            name_column
          );
        }
        // Parse the argument name out.
        parse_consume(state);
      }
      let arg_children = [];
      while (
        state.token.type !== TokenType.POSITIONAL_ARGUMENT_END &&
        state.token.type !== TokenType.NAMED_ARGUMENT_END
      ) {
        // The recursive case.
        arg_children.push(parse_macro(state));
      }
      if (state.token.type !== closing_token(open_type)) {
        parse_report_error(state,
          `expected a closing '${END_POSITIONAL_ARGUMENT_CHAR}' found '${state.token.type.toString()}'`);
      }
      args[arg_name] = arg_children;
      // Consume the *_ARGUMENT_END token out.
      parse_consume(state);
    }
    if (macro_type === AstType.ERROR) {
      return new AstNode(
        macro_type,
        'plaintext',
        in_output_error(unknown_macro_message),
        state.token.line,
        state.token.column
      );
    } else {
      return new AstNode(macro_type, macro_name, args, macro_line, macro_column);
    }
  } else if (state.token.type === TokenType.PLAINTEXT) {
    // Non-recursive case.
    let node = new AstNode(
      AstType.PLAINTEXT,
      'plaintext',
      state.token.value,
      state.token.line,
      state.token.column
    );
    // Consume the PLAINTEXT node out.
    parse_consume(state);
    return node;
  } else if (state.token.type === TokenType.PARAGRAPH) {
    let node = new AstNode(
      AstType.PARAGRAPH,
      undefined,
      undefined,
      state.token.line,
      state.token.column
    );
    // Consume the PLAINTEXT node out.
    parse_consume(state);
    return node;
  } else {
    parse_report_error(
      state,
      `unexpected token ${state.token.type.toString()}`
    );
    let node = new AstNode(
      AstType.PLAINTEXT,
      'plaintext',
      in_output_error('unexpected token'),
      state.token.line,
      state.token.column
    );
    // Consume past whatever happened to avoid an infinite loop.
    parse_consume(state);
    return node;
  }
  state.i += 1;
}

const parse_report_error = function(state, message, line, column) {
  if (line === undefined)
    line = state.token.line;
  if (column === undefined)
    column = state.token.column;
  state.extra_returns.errors.push(new ErrorMessage(
    message, line, column));
}

/**
 * Main cirodown input to HTML/LaTeX/etc. output API wrapper.
 *
 * @returns {String}
 */
const convert = function(
  input_string,
  options,
  extra_returns={},
) {
  if (options === undefined) {
    options = {};
  }
  if (!('body_only'     in options)) { options.body_only     = false; }
  if (!('show_ast'      in options)) { options.show_ast      = false; }
  if (!('show_parse'    in options)) { options.show_parse    = false; }
  if (!('show_tokenize' in options)) { options.show_tokenize = false; }
  if (!('show_tokens'   in options)) { options.show_tokens   = false; }
  extra_returns.errors = [];
  let sub_extra_returns;
  sub_extra_returns = {};
  let tokens = (new Tokenizer(input_string, sub_extra_returns, options.show_tokenize)).tokenize();
  if (options.show_tokens) {
    console.error('tokens:');
    for (let i = 0; i < tokens.length; i++) {
      console.error(`${i}: ${JSON.stringify(tokens[i], null, 2)}`);
    }
    console.error();
  }
  extra_returns.tokens = tokens;
  extra_returns.errors.push(...sub_extra_returns.errors);
  sub_extra_returns = {};
  let ast = parse(tokens, options, sub_extra_returns);
  if (options.show_ast) {
    console.error('ast:');
    console.error(JSON.stringify(ast, null, 2));
    console.error();
  }
  extra_returns.ast = ast;
  extra_returns.errors.push(...sub_extra_returns.errors);
  options.extra_returns = {};
  output = ast.convert(options);
  extra_returns.errors.push(...options.extra_returns.errors);
  if (output[output.length - 1] !== '\n') {
    output += '\n';
  }
  return output;
}

exports.convert = convert;

if (require.main === module) {
  // CLI options.
  const program = require('commander');
  program.option('--body-only', 'output only the content inside the HTLM body element', false);
  program.option('--help-macros', 'print the metadata of all macros to stdout in JSON format. https://cirosantilli.com/cirodown/#', false);
  program.option('--html-embed', 'TODO embed all external resources like images and linked CSS into a single HTML file', false);
  program.option('--output-format', 'output format');
  program.option('--show-ast', 'print the AST to stderr');
  program.option(
    '--show-ast-inside',
    'print the AST to stderr from inside convert before it returns. ' +
      'Useful to debug the program if conversion blow up on the next stages.'
  );
  program.option('--show-parse', 'print parsing internals to stderr');
  program.option('--show-tokenize', 'print tokenization internals to stderr');
  program.option('--show-tokens', 'print the token stream to stderr');
  program.option(
    '--show-tokens-inside',
    'print the token stream to stderr from inside convert before it returns. ' +
      'Useful to debug the program if conversion blow up on the next stages. ' +
      'Also adds token index to the output, which makes debugging the parser ' +
      'way easier.'
  );
  let inputPath;
  program.arguments(
    '[input_path]',
    undefined,
    'Input path. If not given, read from stdin.',
  ).action(function (input_path) {
    inputPath = input_path;
  });
  program.parse(process.argv);

  // Action.
  if (program.helpMacros) {
    console.log(JSON.stringify(macros, null, 2));
  } else {
    const encoding = 'utf8';
    let input;
    let title;
    if (inputPath === undefined) {
      title = 'stdin';
      input = fs.readFileSync(0, encoding);
    } else {
      title = inputPath;
      input = fs.readFileSync(inputPath, encoding);
    }
    let extra_returns = {};
    let output = convert(
      input,
      {
        body_only: program.bodyOnly,
        show_ast: program.showAstInside,
        show_parse: program.showParse,
        show_tokens: program.showTokensInside,
        show_tokenize: program.showTokenize,
        title: title,
      },
      extra_returns
    );
    console.log(output);
    if (program.showTokens) {
      console.error('tokens:');
      console.error(JSON.stringify(extra_returns.tokens, null, 2));
      console.error();
    }
    if (program.showAst) {
      console.error('ast:');
      console.error(JSON.stringify(extra_returns.ast, null, 2));
      console.error();
    }
    let sorted_errors = extra_returns.errors.sort((a, b)=>{
      if (a.line < b.line)
        return -1;
      if (a.line > b.line)
        return 1;
      if (a.column < b.column)
        return -1;
      if (a.column > b.column)
        return 1;
      return 0;
    });
    for (const error of sorted_errors) {
      console.error(error.toString());
    }
    process.exit(extra_returns.errors.length > 0);
  }
}
